#ifndef __VIVADO_SYNTH__
#include <fstream>
using namespace std;

  // Debug utility
  ofstream* global_debug_handle;

#endif //__VIVADO_SYNTH__
// compute file: resnet_compute.h
#include "resnet_compute.h"

#include "hw_classes.h"

struct conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*12544);
  }
  ~conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*12544);
  }
  ~conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_cache {
  // # of banks: 2
  conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_cache conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258;
  conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256_cache conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256;
};



inline void conv_stencil_op_hcompute_conv_stencil_2_write(hw_uint<16>& conv_stencil_op_hcompute_conv_stencil_2, conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w, int dynamic_address) {
  conv_stencil.conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258.write(conv_stencil_op_hcompute_conv_stencil_2, (conv_s0_x - 0) * 1 + (conv_s0_y - 0) * 28 + (conv_s0_w - 0) * 784);
  conv_stencil.conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256.write(conv_stencil_op_hcompute_conv_stencil_2, (conv_s0_x - 0) * 1 + (conv_s0_y - 0) * 28 + (conv_s0_w - 0) * 784);
}

inline hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_select(conv_stencil_cache& conv_stencil, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258 read pattern: { load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> conv_stencil[0, conv_s1_y, conv_stencil_ld2] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15 }
  auto value_conv_stencil_op_hcompute_conv_stencil_2 = conv_stencil.conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  return value_conv_stencil_op_hcompute_conv_stencil_2;
  return 0;
}

inline hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_256_select(conv_stencil_cache& conv_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_op_hcompute_hw_output_stencil_256 read pattern: { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> conv_stencil[hw_output_s0_x_xi, hw_output_s0_y_yi, hw_output_s0_w] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
  auto value_conv_stencil_op_hcompute_conv_stencil_2 = conv_stencil.conv_stencil_op_hcompute_conv_stencil_2_to_conv_stencil_op_hcompute_hw_output_stencil_256.read(/*ram type address*/ (hw_output_s0_x_xi - 0) * 1 + (hw_output_s0_y_yi - 0) * 28 + (hw_output_s0_w - 0) * 784);
  return value_conv_stencil_op_hcompute_conv_stencil_2;
  return 0;
}

// # of bundles = 3
// load_to_conv_stencil_rb_at_conv_s1_x3_read
//	conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258
inline hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_read_bundle_read(conv_stencil_cache& conv_stencil, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258

	hw_uint<16> result;
	hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_res = conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_select(conv_stencil, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, dynamic_address);
	set_at<0, 16>(result, conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_258_res);
	return result;
}

// op_hcompute_conv_stencil_write
//	conv_stencil_op_hcompute_conv_stencil_2
inline void conv_stencil_op_hcompute_conv_stencil_write_bundle_write(hw_uint<16>& op_hcompute_conv_stencil_write, conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w, int dynamic_address) {
	hw_uint<16> conv_stencil_op_hcompute_conv_stencil_2_res = op_hcompute_conv_stencil_write.extract<0, 15>();
	conv_stencil_op_hcompute_conv_stencil_2_write(conv_stencil_op_hcompute_conv_stencil_2_res, conv_stencil, root, conv_s0_y, conv_s0_x, conv_s0_w, dynamic_address);
}

// op_hcompute_hw_output_stencil_read
//	conv_stencil_op_hcompute_hw_output_stencil_256
inline hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_read_bundle_read(conv_stencil_cache& conv_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_op_hcompute_hw_output_stencil_256

	hw_uint<16> result;
	hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_256_res = conv_stencil_op_hcompute_hw_output_stencil_256_select(conv_stencil, root, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi, dynamic_address);
	set_at<0, 16>(result, conv_stencil_op_hcompute_hw_output_stencil_256_res);
	return result;
}

#include "hw_classes.h"

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 9]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache {
	// RAM Box: {[0, 27], [0, 27], [9, 9]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 10]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache {
	// RAM Box: {[0, 27], [0, 27], [10, 10]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 11]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache {
	// RAM Box: {[0, 27], [0, 27], [11, 11]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 12]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache {
	// RAM Box: {[0, 27], [0, 27], [12, 12]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 13]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache {
	// RAM Box: {[0, 27], [0, 27], [13, 13]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 14]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache {
	// RAM Box: {[0, 27], [0, 27], [14, 14]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache {
	// RAM Box: {[0, 27], [0, 27], [15, 15]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 0]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 0]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 1]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache {
	// RAM Box: {[0, 27], [0, 27], [1, 1]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 2]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache {
	// RAM Box: {[0, 27], [0, 27], [2, 2]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 3]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache {
	// RAM Box: {[0, 27], [0, 27], [3, 3]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 4]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache {
	// RAM Box: {[0, 27], [0, 27], [4, 4]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 5]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache {
	// RAM Box: {[0, 27], [0, 27], [5, 5]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 6]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache {
	// RAM Box: {[0, 27], [0, 27], [6, 6]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 7]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache {
	// RAM Box: {[0, 27], [0, 27], [7, 7]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 8]}
	// Capacity: 1204
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[1204];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*1204);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1204)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1204);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache {
	// RAM Box: {[0, 27], [0, 27], [8, 8]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_cache {
  // # of banks: 48
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112;
};



inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 9) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 10) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 11) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 12) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 13) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 14) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 15) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 1) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 2) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 3) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 4) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 5) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 6) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 7) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 8) * 784);
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260 read pattern: { load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, conv_stencil_ld6] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15 }
  if ((((-9 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129;
  }

  
  if ((((-10 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147;
  }

  
  if ((((-11 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165;
  }

  
  if ((((-12 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183;
  }

  
  if ((((-13 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201;
  }

  
  if ((((-14 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219;
  }

  
  if ((((-15 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237;
  }

  
  if ((((conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3;
  }

  
  if ((((-1 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21;
  }

  
  if ((((-2 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263;
  }

  
  if ((((-3 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281;
  }

  
  if ((((-4 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39;
  }

  
  if ((((-5 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57;
  }

  
  if ((((-6 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75;
  }

  
  if ((((-7 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93;
  }

  
  if ((((-8 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 9] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 9) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 10] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 10) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 11] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 11) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 12] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 12) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 13] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 13) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 14] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 14) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 15] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 15) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 1] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 1) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 2] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 2) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 3] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 3) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 4] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 4) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 5] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 5) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 6] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 6) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 7] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 7) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 8] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 8) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111;
  }

  
  return 0;
}

// # of bundles = 35
// load_to_conv_stencil_rb_at_conv_s1_x3_write
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257
inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_write_bundle_write(hw_uint<32>& load_to_conv_stencil_rb_at_conv_s1_x3_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_res = load_to_conv_stencil_rb_at_conv_s1_x3_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_257_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, dynamic_address);
}

// load_to_conv_stencil_rb_at_conv_s1_x7_read
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_res = conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_260_res);
	return result;
}

// load_to_conv_stencil_rb_at_conv_s1_x7_write
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259
inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_write_bundle_write(hw_uint<32>& load_to_conv_stencil_rb_at_conv_s1_x7_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259_res = load_to_conv_stencil_rb_at_conv_s1_x7_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259_write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_259_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, dynamic_address);
}

// op_hcompute_conv_stencil_10_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_130_res);
	return result;
}

// op_hcompute_conv_stencil_10_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_10_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_res = op_hcompute_conv_stencil_10_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_129_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_11_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_148_res);
	return result;
}

// op_hcompute_conv_stencil_11_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_11_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_res = op_hcompute_conv_stencil_11_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_147_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_12_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_166_res);
	return result;
}

// op_hcompute_conv_stencil_12_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_12_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_res = op_hcompute_conv_stencil_12_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_165_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_13_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_184_res);
	return result;
}

// op_hcompute_conv_stencil_13_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_13_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_res = op_hcompute_conv_stencil_13_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_183_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_14_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_202_res);
	return result;
}

// op_hcompute_conv_stencil_14_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_14_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_res = op_hcompute_conv_stencil_14_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_201_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_15_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_220_res);
	return result;
}

// op_hcompute_conv_stencil_15_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_15_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_res = op_hcompute_conv_stencil_15_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_219_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_16_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_238_res);
	return result;
}

// op_hcompute_conv_stencil_16_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_16_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_res = op_hcompute_conv_stencil_16_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_237_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_1_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_4_res);
	return result;
}

// op_hcompute_conv_stencil_1_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_1_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_res = op_hcompute_conv_stencil_1_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_3_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_2_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_22_res);
	return result;
}

// op_hcompute_conv_stencil_2_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_2_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_res = op_hcompute_conv_stencil_2_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_21_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_3_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_264_res);
	return result;
}

// op_hcompute_conv_stencil_3_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_3_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_res = op_hcompute_conv_stencil_3_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_263_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_4_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_282_res);
	return result;
}

// op_hcompute_conv_stencil_4_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_4_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_res = op_hcompute_conv_stencil_4_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_281_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_5_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_40_res);
	return result;
}

// op_hcompute_conv_stencil_5_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_5_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_res = op_hcompute_conv_stencil_5_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_39_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_6_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_58_res);
	return result;
}

// op_hcompute_conv_stencil_6_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_6_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_res = op_hcompute_conv_stencil_6_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_57_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_7_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_76_res);
	return result;
}

// op_hcompute_conv_stencil_7_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_7_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_res = op_hcompute_conv_stencil_7_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_75_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_8_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_94_res);
	return result;
}

// op_hcompute_conv_stencil_8_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_8_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_res = op_hcompute_conv_stencil_8_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_93_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_9_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_112_res);
	return result;
}

// op_hcompute_conv_stencil_9_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_9_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_res = op_hcompute_conv_stencil_9_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_111_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

#include "hw_classes.h"

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_cache {
  // # of banks: 128
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119;
  hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120_cache hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120;
};



inline void hw_input_stencil_op_hcompute_hw_input_stencil_261_write(hw_uint<16>& hw_input_stencil_op_hcompute_hw_input_stencil_261, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z, int dynamic_address) {
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120.write(hw_input_stencil_op_hcompute_hw_input_stencil_261, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_131_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_131 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_131.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_132_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_132 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_132.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_133_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_133 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_133.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_134_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_134 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_134.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_135_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_135 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_135.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_136_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_136 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_136.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_137_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_137 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_137.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_138_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_138 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_10_138.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_149_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_149 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_149.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_150_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_150 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_150.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_151_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_151 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_151.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_152_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_152 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_152.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_153_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_153 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_153.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_154_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_154 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_154.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_155_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_155 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_155.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_156_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_156 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_11_156.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_167_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_167 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_167.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_168_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_168 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_168.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_169_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_169 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_169.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_170_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_170 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_170.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_171_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_171 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_171.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_172_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_172 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_172.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_173_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_173 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_173.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_174_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_174 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_12_174.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_185_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_185 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_185.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_186_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_186 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_186.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_187_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_187 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_187.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_188_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_188 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_188.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_189_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_189 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_189.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_190_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_190 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_190.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_191_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_191 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_191.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_192_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_192 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_13_192.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_203_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_203 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_203.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_204_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_204 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_204.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_205_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_205 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_205.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_206_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_206 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_206.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_207_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_207 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_207.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_208_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_208 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_208.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_209_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_209 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_209.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_210_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_210 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_14_210.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_221_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_221 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_221.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_222_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_222 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_222.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_223_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_223 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_223.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_224_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_224 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_224.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_225_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_225 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_225.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_226_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_226 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_226.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_227_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_227 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_227.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_228_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_228 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_15_228.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_239_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_239 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_239.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_240_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_240 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_240.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_241_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_241 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_241.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_242_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_242 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_242.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_243_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_243 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_243.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_244_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_244 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_244.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_245_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_245 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_245.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_246_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_246 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_16_246.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_10_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_10 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_10.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_11_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_11 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_11.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_12_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_12 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_12.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_5_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_5 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_5.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_6_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_6 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_6.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_7_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_7 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_7.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_8_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_8 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_8.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_9_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_9 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_1_9.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_23_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_23 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_23.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_24_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_24 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_24.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_25_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_25 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_25.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_26_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_26 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_26.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_27_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_27 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_27.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_28_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_28 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_28.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_29_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_29 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_29.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_30_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_30 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_2_30.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_265_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_265 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_265.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_266_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_266 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_266.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_267_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_267 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_267.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_268_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_268 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_268.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_269_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_269 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_269.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_270_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_270 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_270.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_271_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_271 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_271.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_272_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_272 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_3_272.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_283_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_283 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_283.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_284_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_284 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_284.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_285_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_285 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_285.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_286_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_286 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_286.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_287_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_287 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_287.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_288_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_288 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_288.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_289_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_289 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_289.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_290_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_290 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_4_290.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_41_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_41 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_41.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_42_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_42 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_42.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_43_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_43 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_43.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_44_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_44 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_44.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_45_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_45 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_45.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_46_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_46 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_46.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_47_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_47 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_47.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_48_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_48 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_5_48.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_59_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_59 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_59.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_60_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_60 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_60.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_61_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_61 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_61.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_62_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_62 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_62.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_63_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_63 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_63.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_64_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_64 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_64.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_65_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_65 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_65.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_66_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_66 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_6_66.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_77_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_77 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_77.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_78_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_78 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_78.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_79_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_79 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_79.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_80_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_80 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_80.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_81_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_81 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_81.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_82_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_82 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_82.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_83_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_83 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_83.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_84_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_84 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_7_84.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_100_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_100 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_100.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_101_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_101 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_101.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_102_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_102 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_102.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_95_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_95 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_95.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_96_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_96 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_96.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_97_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_97 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_97.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_98_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_98 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_98.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_99_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_99 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_8_99.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_113_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_113 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_113.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_114_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_114 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_114.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_115_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_115 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_115.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_116_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_116 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_116.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_117_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_117 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_117.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_118_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_118 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_118.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_119_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_119 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_119.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_120_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_120 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_261 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_261_to_hw_input_stencil_op_hcompute_conv_stencil_9_120.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_261;
  return 0;
}

// # of bundles = 17
// op_hcompute_conv_stencil_10_read
//	hw_input_stencil_op_hcompute_conv_stencil_10_131
//	hw_input_stencil_op_hcompute_conv_stencil_10_132
//	hw_input_stencil_op_hcompute_conv_stencil_10_133
//	hw_input_stencil_op_hcompute_conv_stencil_10_134
//	hw_input_stencil_op_hcompute_conv_stencil_10_135
//	hw_input_stencil_op_hcompute_conv_stencil_10_136
//	hw_input_stencil_op_hcompute_conv_stencil_10_137
//	hw_input_stencil_op_hcompute_conv_stencil_10_138
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_10_131
    // hw_input_stencil_op_hcompute_conv_stencil_10_132
    // hw_input_stencil_op_hcompute_conv_stencil_10_133
    // hw_input_stencil_op_hcompute_conv_stencil_10_134
    // hw_input_stencil_op_hcompute_conv_stencil_10_135
    // hw_input_stencil_op_hcompute_conv_stencil_10_136
    // hw_input_stencil_op_hcompute_conv_stencil_10_137
    // hw_input_stencil_op_hcompute_conv_stencil_10_138

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_131_res = hw_input_stencil_op_hcompute_conv_stencil_10_131_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_131_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_132_res = hw_input_stencil_op_hcompute_conv_stencil_10_132_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_132_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_133_res = hw_input_stencil_op_hcompute_conv_stencil_10_133_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_133_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_134_res = hw_input_stencil_op_hcompute_conv_stencil_10_134_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_134_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_135_res = hw_input_stencil_op_hcompute_conv_stencil_10_135_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_135_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_136_res = hw_input_stencil_op_hcompute_conv_stencil_10_136_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_136_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_137_res = hw_input_stencil_op_hcompute_conv_stencil_10_137_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_137_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_138_res = hw_input_stencil_op_hcompute_conv_stencil_10_138_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_138_res);
	return result;
}

// op_hcompute_conv_stencil_11_read
//	hw_input_stencil_op_hcompute_conv_stencil_11_149
//	hw_input_stencil_op_hcompute_conv_stencil_11_150
//	hw_input_stencil_op_hcompute_conv_stencil_11_151
//	hw_input_stencil_op_hcompute_conv_stencil_11_152
//	hw_input_stencil_op_hcompute_conv_stencil_11_153
//	hw_input_stencil_op_hcompute_conv_stencil_11_154
//	hw_input_stencil_op_hcompute_conv_stencil_11_155
//	hw_input_stencil_op_hcompute_conv_stencil_11_156
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_11_149
    // hw_input_stencil_op_hcompute_conv_stencil_11_150
    // hw_input_stencil_op_hcompute_conv_stencil_11_151
    // hw_input_stencil_op_hcompute_conv_stencil_11_152
    // hw_input_stencil_op_hcompute_conv_stencil_11_153
    // hw_input_stencil_op_hcompute_conv_stencil_11_154
    // hw_input_stencil_op_hcompute_conv_stencil_11_155
    // hw_input_stencil_op_hcompute_conv_stencil_11_156

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_149_res = hw_input_stencil_op_hcompute_conv_stencil_11_149_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_149_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_150_res = hw_input_stencil_op_hcompute_conv_stencil_11_150_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_150_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_151_res = hw_input_stencil_op_hcompute_conv_stencil_11_151_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_151_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_152_res = hw_input_stencil_op_hcompute_conv_stencil_11_152_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_152_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_153_res = hw_input_stencil_op_hcompute_conv_stencil_11_153_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_153_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_154_res = hw_input_stencil_op_hcompute_conv_stencil_11_154_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_154_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_155_res = hw_input_stencil_op_hcompute_conv_stencil_11_155_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_155_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_156_res = hw_input_stencil_op_hcompute_conv_stencil_11_156_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_156_res);
	return result;
}

// op_hcompute_conv_stencil_12_read
//	hw_input_stencil_op_hcompute_conv_stencil_12_167
//	hw_input_stencil_op_hcompute_conv_stencil_12_168
//	hw_input_stencil_op_hcompute_conv_stencil_12_169
//	hw_input_stencil_op_hcompute_conv_stencil_12_170
//	hw_input_stencil_op_hcompute_conv_stencil_12_171
//	hw_input_stencil_op_hcompute_conv_stencil_12_172
//	hw_input_stencil_op_hcompute_conv_stencil_12_173
//	hw_input_stencil_op_hcompute_conv_stencil_12_174
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_12_167
    // hw_input_stencil_op_hcompute_conv_stencil_12_168
    // hw_input_stencil_op_hcompute_conv_stencil_12_169
    // hw_input_stencil_op_hcompute_conv_stencil_12_170
    // hw_input_stencil_op_hcompute_conv_stencil_12_171
    // hw_input_stencil_op_hcompute_conv_stencil_12_172
    // hw_input_stencil_op_hcompute_conv_stencil_12_173
    // hw_input_stencil_op_hcompute_conv_stencil_12_174

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_167_res = hw_input_stencil_op_hcompute_conv_stencil_12_167_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_167_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_168_res = hw_input_stencil_op_hcompute_conv_stencil_12_168_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_168_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_169_res = hw_input_stencil_op_hcompute_conv_stencil_12_169_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_169_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_170_res = hw_input_stencil_op_hcompute_conv_stencil_12_170_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_170_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_171_res = hw_input_stencil_op_hcompute_conv_stencil_12_171_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_171_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_172_res = hw_input_stencil_op_hcompute_conv_stencil_12_172_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_172_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_173_res = hw_input_stencil_op_hcompute_conv_stencil_12_173_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_173_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_174_res = hw_input_stencil_op_hcompute_conv_stencil_12_174_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_174_res);
	return result;
}

// op_hcompute_conv_stencil_13_read
//	hw_input_stencil_op_hcompute_conv_stencil_13_185
//	hw_input_stencil_op_hcompute_conv_stencil_13_186
//	hw_input_stencil_op_hcompute_conv_stencil_13_187
//	hw_input_stencil_op_hcompute_conv_stencil_13_188
//	hw_input_stencil_op_hcompute_conv_stencil_13_189
//	hw_input_stencil_op_hcompute_conv_stencil_13_190
//	hw_input_stencil_op_hcompute_conv_stencil_13_191
//	hw_input_stencil_op_hcompute_conv_stencil_13_192
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_13_185
    // hw_input_stencil_op_hcompute_conv_stencil_13_186
    // hw_input_stencil_op_hcompute_conv_stencil_13_187
    // hw_input_stencil_op_hcompute_conv_stencil_13_188
    // hw_input_stencil_op_hcompute_conv_stencil_13_189
    // hw_input_stencil_op_hcompute_conv_stencil_13_190
    // hw_input_stencil_op_hcompute_conv_stencil_13_191
    // hw_input_stencil_op_hcompute_conv_stencil_13_192

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_185_res = hw_input_stencil_op_hcompute_conv_stencil_13_185_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_185_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_186_res = hw_input_stencil_op_hcompute_conv_stencil_13_186_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_186_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_187_res = hw_input_stencil_op_hcompute_conv_stencil_13_187_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_187_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_188_res = hw_input_stencil_op_hcompute_conv_stencil_13_188_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_188_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_189_res = hw_input_stencil_op_hcompute_conv_stencil_13_189_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_189_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_190_res = hw_input_stencil_op_hcompute_conv_stencil_13_190_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_190_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_191_res = hw_input_stencil_op_hcompute_conv_stencil_13_191_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_191_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_192_res = hw_input_stencil_op_hcompute_conv_stencil_13_192_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_192_res);
	return result;
}

// op_hcompute_conv_stencil_14_read
//	hw_input_stencil_op_hcompute_conv_stencil_14_203
//	hw_input_stencil_op_hcompute_conv_stencil_14_204
//	hw_input_stencil_op_hcompute_conv_stencil_14_205
//	hw_input_stencil_op_hcompute_conv_stencil_14_206
//	hw_input_stencil_op_hcompute_conv_stencil_14_207
//	hw_input_stencil_op_hcompute_conv_stencil_14_208
//	hw_input_stencil_op_hcompute_conv_stencil_14_209
//	hw_input_stencil_op_hcompute_conv_stencil_14_210
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_14_203
    // hw_input_stencil_op_hcompute_conv_stencil_14_204
    // hw_input_stencil_op_hcompute_conv_stencil_14_205
    // hw_input_stencil_op_hcompute_conv_stencil_14_206
    // hw_input_stencil_op_hcompute_conv_stencil_14_207
    // hw_input_stencil_op_hcompute_conv_stencil_14_208
    // hw_input_stencil_op_hcompute_conv_stencil_14_209
    // hw_input_stencil_op_hcompute_conv_stencil_14_210

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_203_res = hw_input_stencil_op_hcompute_conv_stencil_14_203_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_203_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_204_res = hw_input_stencil_op_hcompute_conv_stencil_14_204_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_204_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_205_res = hw_input_stencil_op_hcompute_conv_stencil_14_205_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_205_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_206_res = hw_input_stencil_op_hcompute_conv_stencil_14_206_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_206_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_207_res = hw_input_stencil_op_hcompute_conv_stencil_14_207_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_207_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_208_res = hw_input_stencil_op_hcompute_conv_stencil_14_208_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_208_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_209_res = hw_input_stencil_op_hcompute_conv_stencil_14_209_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_209_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_210_res = hw_input_stencil_op_hcompute_conv_stencil_14_210_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_210_res);
	return result;
}

// op_hcompute_conv_stencil_15_read
//	hw_input_stencil_op_hcompute_conv_stencil_15_221
//	hw_input_stencil_op_hcompute_conv_stencil_15_222
//	hw_input_stencil_op_hcompute_conv_stencil_15_223
//	hw_input_stencil_op_hcompute_conv_stencil_15_224
//	hw_input_stencil_op_hcompute_conv_stencil_15_225
//	hw_input_stencil_op_hcompute_conv_stencil_15_226
//	hw_input_stencil_op_hcompute_conv_stencil_15_227
//	hw_input_stencil_op_hcompute_conv_stencil_15_228
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_15_221
    // hw_input_stencil_op_hcompute_conv_stencil_15_222
    // hw_input_stencil_op_hcompute_conv_stencil_15_223
    // hw_input_stencil_op_hcompute_conv_stencil_15_224
    // hw_input_stencil_op_hcompute_conv_stencil_15_225
    // hw_input_stencil_op_hcompute_conv_stencil_15_226
    // hw_input_stencil_op_hcompute_conv_stencil_15_227
    // hw_input_stencil_op_hcompute_conv_stencil_15_228

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_221_res = hw_input_stencil_op_hcompute_conv_stencil_15_221_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_221_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_222_res = hw_input_stencil_op_hcompute_conv_stencil_15_222_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_222_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_223_res = hw_input_stencil_op_hcompute_conv_stencil_15_223_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_223_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_224_res = hw_input_stencil_op_hcompute_conv_stencil_15_224_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_224_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_225_res = hw_input_stencil_op_hcompute_conv_stencil_15_225_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_225_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_226_res = hw_input_stencil_op_hcompute_conv_stencil_15_226_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_226_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_227_res = hw_input_stencil_op_hcompute_conv_stencil_15_227_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_227_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_228_res = hw_input_stencil_op_hcompute_conv_stencil_15_228_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_228_res);
	return result;
}

// op_hcompute_conv_stencil_16_read
//	hw_input_stencil_op_hcompute_conv_stencil_16_239
//	hw_input_stencil_op_hcompute_conv_stencil_16_240
//	hw_input_stencil_op_hcompute_conv_stencil_16_241
//	hw_input_stencil_op_hcompute_conv_stencil_16_242
//	hw_input_stencil_op_hcompute_conv_stencil_16_243
//	hw_input_stencil_op_hcompute_conv_stencil_16_244
//	hw_input_stencil_op_hcompute_conv_stencil_16_245
//	hw_input_stencil_op_hcompute_conv_stencil_16_246
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_16_239
    // hw_input_stencil_op_hcompute_conv_stencil_16_240
    // hw_input_stencil_op_hcompute_conv_stencil_16_241
    // hw_input_stencil_op_hcompute_conv_stencil_16_242
    // hw_input_stencil_op_hcompute_conv_stencil_16_243
    // hw_input_stencil_op_hcompute_conv_stencil_16_244
    // hw_input_stencil_op_hcompute_conv_stencil_16_245
    // hw_input_stencil_op_hcompute_conv_stencil_16_246

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_239_res = hw_input_stencil_op_hcompute_conv_stencil_16_239_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_239_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_240_res = hw_input_stencil_op_hcompute_conv_stencil_16_240_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_240_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_241_res = hw_input_stencil_op_hcompute_conv_stencil_16_241_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_241_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_242_res = hw_input_stencil_op_hcompute_conv_stencil_16_242_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_242_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_243_res = hw_input_stencil_op_hcompute_conv_stencil_16_243_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_243_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_244_res = hw_input_stencil_op_hcompute_conv_stencil_16_244_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_244_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_245_res = hw_input_stencil_op_hcompute_conv_stencil_16_245_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_245_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_246_res = hw_input_stencil_op_hcompute_conv_stencil_16_246_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_246_res);
	return result;
}

// op_hcompute_conv_stencil_1_read
//	hw_input_stencil_op_hcompute_conv_stencil_1_5
//	hw_input_stencil_op_hcompute_conv_stencil_1_6
//	hw_input_stencil_op_hcompute_conv_stencil_1_7
//	hw_input_stencil_op_hcompute_conv_stencil_1_8
//	hw_input_stencil_op_hcompute_conv_stencil_1_9
//	hw_input_stencil_op_hcompute_conv_stencil_1_10
//	hw_input_stencil_op_hcompute_conv_stencil_1_11
//	hw_input_stencil_op_hcompute_conv_stencil_1_12
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_1_5
    // hw_input_stencil_op_hcompute_conv_stencil_1_6
    // hw_input_stencil_op_hcompute_conv_stencil_1_7
    // hw_input_stencil_op_hcompute_conv_stencil_1_8
    // hw_input_stencil_op_hcompute_conv_stencil_1_9
    // hw_input_stencil_op_hcompute_conv_stencil_1_10
    // hw_input_stencil_op_hcompute_conv_stencil_1_11
    // hw_input_stencil_op_hcompute_conv_stencil_1_12

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_5_res = hw_input_stencil_op_hcompute_conv_stencil_1_5_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_5_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_6_res = hw_input_stencil_op_hcompute_conv_stencil_1_6_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_6_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_7_res = hw_input_stencil_op_hcompute_conv_stencil_1_7_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_7_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_8_res = hw_input_stencil_op_hcompute_conv_stencil_1_8_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_8_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_9_res = hw_input_stencil_op_hcompute_conv_stencil_1_9_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_9_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_10_res = hw_input_stencil_op_hcompute_conv_stencil_1_10_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_10_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_11_res = hw_input_stencil_op_hcompute_conv_stencil_1_11_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_11_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_12_res = hw_input_stencil_op_hcompute_conv_stencil_1_12_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_12_res);
	return result;
}

// op_hcompute_conv_stencil_2_read
//	hw_input_stencil_op_hcompute_conv_stencil_2_23
//	hw_input_stencil_op_hcompute_conv_stencil_2_24
//	hw_input_stencil_op_hcompute_conv_stencil_2_25
//	hw_input_stencil_op_hcompute_conv_stencil_2_26
//	hw_input_stencil_op_hcompute_conv_stencil_2_27
//	hw_input_stencil_op_hcompute_conv_stencil_2_28
//	hw_input_stencil_op_hcompute_conv_stencil_2_29
//	hw_input_stencil_op_hcompute_conv_stencil_2_30
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_2_23
    // hw_input_stencil_op_hcompute_conv_stencil_2_24
    // hw_input_stencil_op_hcompute_conv_stencil_2_25
    // hw_input_stencil_op_hcompute_conv_stencil_2_26
    // hw_input_stencil_op_hcompute_conv_stencil_2_27
    // hw_input_stencil_op_hcompute_conv_stencil_2_28
    // hw_input_stencil_op_hcompute_conv_stencil_2_29
    // hw_input_stencil_op_hcompute_conv_stencil_2_30

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_23_res = hw_input_stencil_op_hcompute_conv_stencil_2_23_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_23_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_24_res = hw_input_stencil_op_hcompute_conv_stencil_2_24_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_24_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_25_res = hw_input_stencil_op_hcompute_conv_stencil_2_25_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_25_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_26_res = hw_input_stencil_op_hcompute_conv_stencil_2_26_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_26_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_27_res = hw_input_stencil_op_hcompute_conv_stencil_2_27_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_27_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_28_res = hw_input_stencil_op_hcompute_conv_stencil_2_28_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_28_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_29_res = hw_input_stencil_op_hcompute_conv_stencil_2_29_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_29_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_30_res = hw_input_stencil_op_hcompute_conv_stencil_2_30_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_30_res);
	return result;
}

// op_hcompute_conv_stencil_3_read
//	hw_input_stencil_op_hcompute_conv_stencil_3_265
//	hw_input_stencil_op_hcompute_conv_stencil_3_266
//	hw_input_stencil_op_hcompute_conv_stencil_3_267
//	hw_input_stencil_op_hcompute_conv_stencil_3_268
//	hw_input_stencil_op_hcompute_conv_stencil_3_269
//	hw_input_stencil_op_hcompute_conv_stencil_3_270
//	hw_input_stencil_op_hcompute_conv_stencil_3_271
//	hw_input_stencil_op_hcompute_conv_stencil_3_272
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_3_265
    // hw_input_stencil_op_hcompute_conv_stencil_3_266
    // hw_input_stencil_op_hcompute_conv_stencil_3_267
    // hw_input_stencil_op_hcompute_conv_stencil_3_268
    // hw_input_stencil_op_hcompute_conv_stencil_3_269
    // hw_input_stencil_op_hcompute_conv_stencil_3_270
    // hw_input_stencil_op_hcompute_conv_stencil_3_271
    // hw_input_stencil_op_hcompute_conv_stencil_3_272

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_265_res = hw_input_stencil_op_hcompute_conv_stencil_3_265_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_265_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_266_res = hw_input_stencil_op_hcompute_conv_stencil_3_266_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_266_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_267_res = hw_input_stencil_op_hcompute_conv_stencil_3_267_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_267_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_268_res = hw_input_stencil_op_hcompute_conv_stencil_3_268_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_268_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_269_res = hw_input_stencil_op_hcompute_conv_stencil_3_269_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_269_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_270_res = hw_input_stencil_op_hcompute_conv_stencil_3_270_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_270_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_271_res = hw_input_stencil_op_hcompute_conv_stencil_3_271_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_271_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_272_res = hw_input_stencil_op_hcompute_conv_stencil_3_272_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_272_res);
	return result;
}

// op_hcompute_conv_stencil_4_read
//	hw_input_stencil_op_hcompute_conv_stencil_4_283
//	hw_input_stencil_op_hcompute_conv_stencil_4_284
//	hw_input_stencil_op_hcompute_conv_stencil_4_285
//	hw_input_stencil_op_hcompute_conv_stencil_4_286
//	hw_input_stencil_op_hcompute_conv_stencil_4_287
//	hw_input_stencil_op_hcompute_conv_stencil_4_288
//	hw_input_stencil_op_hcompute_conv_stencil_4_289
//	hw_input_stencil_op_hcompute_conv_stencil_4_290
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_4_283
    // hw_input_stencil_op_hcompute_conv_stencil_4_284
    // hw_input_stencil_op_hcompute_conv_stencil_4_285
    // hw_input_stencil_op_hcompute_conv_stencil_4_286
    // hw_input_stencil_op_hcompute_conv_stencil_4_287
    // hw_input_stencil_op_hcompute_conv_stencil_4_288
    // hw_input_stencil_op_hcompute_conv_stencil_4_289
    // hw_input_stencil_op_hcompute_conv_stencil_4_290

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_283_res = hw_input_stencil_op_hcompute_conv_stencil_4_283_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_283_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_284_res = hw_input_stencil_op_hcompute_conv_stencil_4_284_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_284_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_285_res = hw_input_stencil_op_hcompute_conv_stencil_4_285_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_285_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_286_res = hw_input_stencil_op_hcompute_conv_stencil_4_286_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_286_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_287_res = hw_input_stencil_op_hcompute_conv_stencil_4_287_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_287_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_288_res = hw_input_stencil_op_hcompute_conv_stencil_4_288_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_288_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_289_res = hw_input_stencil_op_hcompute_conv_stencil_4_289_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_289_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_290_res = hw_input_stencil_op_hcompute_conv_stencil_4_290_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_290_res);
	return result;
}

// op_hcompute_conv_stencil_5_read
//	hw_input_stencil_op_hcompute_conv_stencil_5_41
//	hw_input_stencil_op_hcompute_conv_stencil_5_42
//	hw_input_stencil_op_hcompute_conv_stencil_5_43
//	hw_input_stencil_op_hcompute_conv_stencil_5_44
//	hw_input_stencil_op_hcompute_conv_stencil_5_45
//	hw_input_stencil_op_hcompute_conv_stencil_5_46
//	hw_input_stencil_op_hcompute_conv_stencil_5_47
//	hw_input_stencil_op_hcompute_conv_stencil_5_48
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_5_41
    // hw_input_stencil_op_hcompute_conv_stencil_5_42
    // hw_input_stencil_op_hcompute_conv_stencil_5_43
    // hw_input_stencil_op_hcompute_conv_stencil_5_44
    // hw_input_stencil_op_hcompute_conv_stencil_5_45
    // hw_input_stencil_op_hcompute_conv_stencil_5_46
    // hw_input_stencil_op_hcompute_conv_stencil_5_47
    // hw_input_stencil_op_hcompute_conv_stencil_5_48

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_41_res = hw_input_stencil_op_hcompute_conv_stencil_5_41_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_41_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_42_res = hw_input_stencil_op_hcompute_conv_stencil_5_42_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_42_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_43_res = hw_input_stencil_op_hcompute_conv_stencil_5_43_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_43_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_44_res = hw_input_stencil_op_hcompute_conv_stencil_5_44_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_44_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_45_res = hw_input_stencil_op_hcompute_conv_stencil_5_45_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_45_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_46_res = hw_input_stencil_op_hcompute_conv_stencil_5_46_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_46_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_47_res = hw_input_stencil_op_hcompute_conv_stencil_5_47_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_47_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_48_res = hw_input_stencil_op_hcompute_conv_stencil_5_48_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_48_res);
	return result;
}

// op_hcompute_conv_stencil_6_read
//	hw_input_stencil_op_hcompute_conv_stencil_6_59
//	hw_input_stencil_op_hcompute_conv_stencil_6_60
//	hw_input_stencil_op_hcompute_conv_stencil_6_61
//	hw_input_stencil_op_hcompute_conv_stencil_6_62
//	hw_input_stencil_op_hcompute_conv_stencil_6_63
//	hw_input_stencil_op_hcompute_conv_stencil_6_64
//	hw_input_stencil_op_hcompute_conv_stencil_6_65
//	hw_input_stencil_op_hcompute_conv_stencil_6_66
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_6_59
    // hw_input_stencil_op_hcompute_conv_stencil_6_60
    // hw_input_stencil_op_hcompute_conv_stencil_6_61
    // hw_input_stencil_op_hcompute_conv_stencil_6_62
    // hw_input_stencil_op_hcompute_conv_stencil_6_63
    // hw_input_stencil_op_hcompute_conv_stencil_6_64
    // hw_input_stencil_op_hcompute_conv_stencil_6_65
    // hw_input_stencil_op_hcompute_conv_stencil_6_66

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_59_res = hw_input_stencil_op_hcompute_conv_stencil_6_59_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_59_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_60_res = hw_input_stencil_op_hcompute_conv_stencil_6_60_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_60_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_61_res = hw_input_stencil_op_hcompute_conv_stencil_6_61_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_61_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_62_res = hw_input_stencil_op_hcompute_conv_stencil_6_62_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_62_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_63_res = hw_input_stencil_op_hcompute_conv_stencil_6_63_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_63_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_64_res = hw_input_stencil_op_hcompute_conv_stencil_6_64_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_64_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_65_res = hw_input_stencil_op_hcompute_conv_stencil_6_65_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_65_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_66_res = hw_input_stencil_op_hcompute_conv_stencil_6_66_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_66_res);
	return result;
}

// op_hcompute_conv_stencil_7_read
//	hw_input_stencil_op_hcompute_conv_stencil_7_77
//	hw_input_stencil_op_hcompute_conv_stencil_7_78
//	hw_input_stencil_op_hcompute_conv_stencil_7_79
//	hw_input_stencil_op_hcompute_conv_stencil_7_80
//	hw_input_stencil_op_hcompute_conv_stencil_7_81
//	hw_input_stencil_op_hcompute_conv_stencil_7_82
//	hw_input_stencil_op_hcompute_conv_stencil_7_83
//	hw_input_stencil_op_hcompute_conv_stencil_7_84
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_7_77
    // hw_input_stencil_op_hcompute_conv_stencil_7_78
    // hw_input_stencil_op_hcompute_conv_stencil_7_79
    // hw_input_stencil_op_hcompute_conv_stencil_7_80
    // hw_input_stencil_op_hcompute_conv_stencil_7_81
    // hw_input_stencil_op_hcompute_conv_stencil_7_82
    // hw_input_stencil_op_hcompute_conv_stencil_7_83
    // hw_input_stencil_op_hcompute_conv_stencil_7_84

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_77_res = hw_input_stencil_op_hcompute_conv_stencil_7_77_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_77_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_78_res = hw_input_stencil_op_hcompute_conv_stencil_7_78_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_78_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_79_res = hw_input_stencil_op_hcompute_conv_stencil_7_79_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_79_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_80_res = hw_input_stencil_op_hcompute_conv_stencil_7_80_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_80_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_81_res = hw_input_stencil_op_hcompute_conv_stencil_7_81_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_81_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_82_res = hw_input_stencil_op_hcompute_conv_stencil_7_82_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_82_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_83_res = hw_input_stencil_op_hcompute_conv_stencil_7_83_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_83_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_84_res = hw_input_stencil_op_hcompute_conv_stencil_7_84_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_84_res);
	return result;
}

// op_hcompute_conv_stencil_8_read
//	hw_input_stencil_op_hcompute_conv_stencil_8_95
//	hw_input_stencil_op_hcompute_conv_stencil_8_96
//	hw_input_stencil_op_hcompute_conv_stencil_8_97
//	hw_input_stencil_op_hcompute_conv_stencil_8_98
//	hw_input_stencil_op_hcompute_conv_stencil_8_99
//	hw_input_stencil_op_hcompute_conv_stencil_8_100
//	hw_input_stencil_op_hcompute_conv_stencil_8_101
//	hw_input_stencil_op_hcompute_conv_stencil_8_102
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_8_95
    // hw_input_stencil_op_hcompute_conv_stencil_8_96
    // hw_input_stencil_op_hcompute_conv_stencil_8_97
    // hw_input_stencil_op_hcompute_conv_stencil_8_98
    // hw_input_stencil_op_hcompute_conv_stencil_8_99
    // hw_input_stencil_op_hcompute_conv_stencil_8_100
    // hw_input_stencil_op_hcompute_conv_stencil_8_101
    // hw_input_stencil_op_hcompute_conv_stencil_8_102

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_95_res = hw_input_stencil_op_hcompute_conv_stencil_8_95_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_95_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_96_res = hw_input_stencil_op_hcompute_conv_stencil_8_96_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_96_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_97_res = hw_input_stencil_op_hcompute_conv_stencil_8_97_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_97_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_98_res = hw_input_stencil_op_hcompute_conv_stencil_8_98_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_98_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_99_res = hw_input_stencil_op_hcompute_conv_stencil_8_99_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_99_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_100_res = hw_input_stencil_op_hcompute_conv_stencil_8_100_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_100_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_101_res = hw_input_stencil_op_hcompute_conv_stencil_8_101_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_101_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_102_res = hw_input_stencil_op_hcompute_conv_stencil_8_102_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_102_res);
	return result;
}

// op_hcompute_conv_stencil_9_read
//	hw_input_stencil_op_hcompute_conv_stencil_9_113
//	hw_input_stencil_op_hcompute_conv_stencil_9_114
//	hw_input_stencil_op_hcompute_conv_stencil_9_115
//	hw_input_stencil_op_hcompute_conv_stencil_9_116
//	hw_input_stencil_op_hcompute_conv_stencil_9_117
//	hw_input_stencil_op_hcompute_conv_stencil_9_118
//	hw_input_stencil_op_hcompute_conv_stencil_9_119
//	hw_input_stencil_op_hcompute_conv_stencil_9_120
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_9_113
    // hw_input_stencil_op_hcompute_conv_stencil_9_114
    // hw_input_stencil_op_hcompute_conv_stencil_9_115
    // hw_input_stencil_op_hcompute_conv_stencil_9_116
    // hw_input_stencil_op_hcompute_conv_stencil_9_117
    // hw_input_stencil_op_hcompute_conv_stencil_9_118
    // hw_input_stencil_op_hcompute_conv_stencil_9_119
    // hw_input_stencil_op_hcompute_conv_stencil_9_120

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_113_res = hw_input_stencil_op_hcompute_conv_stencil_9_113_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_113_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_114_res = hw_input_stencil_op_hcompute_conv_stencil_9_114_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_114_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_115_res = hw_input_stencil_op_hcompute_conv_stencil_9_115_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_115_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_116_res = hw_input_stencil_op_hcompute_conv_stencil_9_116_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_116_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_117_res = hw_input_stencil_op_hcompute_conv_stencil_9_117_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_117_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_118_res = hw_input_stencil_op_hcompute_conv_stencil_9_118_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_118_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_119_res = hw_input_stencil_op_hcompute_conv_stencil_9_119_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_119_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_120_res = hw_input_stencil_op_hcompute_conv_stencil_9_120_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_120_res);
	return result;
}

// op_hcompute_hw_input_stencil_write
//	hw_input_stencil_op_hcompute_hw_input_stencil_261
inline void hw_input_stencil_op_hcompute_hw_input_stencil_write_bundle_write(hw_uint<16>& op_hcompute_hw_input_stencil_write, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z, int dynamic_address) {
	hw_uint<16> hw_input_stencil_op_hcompute_hw_input_stencil_261_res = op_hcompute_hw_input_stencil_write.extract<0, 15>();
	hw_input_stencil_op_hcompute_hw_input_stencil_261_write(hw_input_stencil_op_hcompute_hw_input_stencil_261_res, hw_input_stencil, root, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z, dynamic_address);
}

#include "hw_classes.h"

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_cache {
  // # of banks: 128
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128;
};



inline void hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_write(hw_uint<16>& hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z, int dynamic_address) {
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_139_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_139 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_139.read(/*ram type address*/ (0 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_140_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_140 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_140.read(/*ram type address*/ (1 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_141_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_141 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_141.read(/*ram type address*/ (2 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_142_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_142 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_142.read(/*ram type address*/ (3 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_143_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_143 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_143.read(/*ram type address*/ (4 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_144_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_144 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_144.read(/*ram type address*/ (5 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_145_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_145 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_145.read(/*ram type address*/ (6 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_146_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_146 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_146.read(/*ram type address*/ (7 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_157_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_157 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_157.read(/*ram type address*/ (0 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_158_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_158 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_158.read(/*ram type address*/ (1 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_159_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_159 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_159.read(/*ram type address*/ (2 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_160_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_160 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_160.read(/*ram type address*/ (3 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_161_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_161 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_161.read(/*ram type address*/ (4 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_162_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_162 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_162.read(/*ram type address*/ (5 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_163_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_163 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_163.read(/*ram type address*/ (6 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_164_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_164 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_164.read(/*ram type address*/ (7 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_175_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_175 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_175.read(/*ram type address*/ (0 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_176_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_176 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_176.read(/*ram type address*/ (1 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_177_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_177 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_177.read(/*ram type address*/ (2 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_178_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_178 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_178.read(/*ram type address*/ (3 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_179_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_179 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_179.read(/*ram type address*/ (4 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_180_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_180 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_180.read(/*ram type address*/ (5 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_181_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_181 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_181.read(/*ram type address*/ (6 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_182_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_182 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_182.read(/*ram type address*/ (7 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_193_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_193 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_193.read(/*ram type address*/ (3 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_194_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_194 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_194.read(/*ram type address*/ (4 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_195_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_195 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_195.read(/*ram type address*/ (5 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_196_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_196 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_196.read(/*ram type address*/ (6 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_197_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_197 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_197.read(/*ram type address*/ (7 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_198_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_198 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_198.read(/*ram type address*/ (0 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_199_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_199 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_199.read(/*ram type address*/ (1 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_200_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_200 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_200.read(/*ram type address*/ (2 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_211_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_211 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_211.read(/*ram type address*/ (0 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_212_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_212 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_212.read(/*ram type address*/ (1 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_213_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_213 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_213.read(/*ram type address*/ (2 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_214_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_214 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_214.read(/*ram type address*/ (3 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_215_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_215 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_215.read(/*ram type address*/ (4 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_216_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_216 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_216.read(/*ram type address*/ (5 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_217_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_217 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_217.read(/*ram type address*/ (6 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_218_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_218 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_218.read(/*ram type address*/ (7 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_229_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_229 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_229.read(/*ram type address*/ (0 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_230_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_230 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_230.read(/*ram type address*/ (1 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_231_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_231 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_231.read(/*ram type address*/ (2 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_232_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_232 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_232.read(/*ram type address*/ (3 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_233_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_233 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_233.read(/*ram type address*/ (4 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_234_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_234 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_234.read(/*ram type address*/ (5 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_235_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_235 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_235.read(/*ram type address*/ (6 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_236_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_236 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_236.read(/*ram type address*/ (7 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_247_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_247 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_247.read(/*ram type address*/ (0 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_248_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_248 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_248.read(/*ram type address*/ (1 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_249_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_249 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_249.read(/*ram type address*/ (2 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_250_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_250 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_250.read(/*ram type address*/ (3 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_251_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_251 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_251.read(/*ram type address*/ (4 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_252_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_252 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_252.read(/*ram type address*/ (5 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_253_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_253 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_253.read(/*ram type address*/ (6 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_254_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_254 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_254.read(/*ram type address*/ (7 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_13_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_13 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_13.read(/*ram type address*/ (0 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_14_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_14 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_14.read(/*ram type address*/ (1 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_15_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_15 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_15.read(/*ram type address*/ (2 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_16_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_16 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_16.read(/*ram type address*/ (3 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_17_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_17 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_17.read(/*ram type address*/ (4 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_18_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_18 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_18.read(/*ram type address*/ (5 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_19_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_19 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_19.read(/*ram type address*/ (6 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_20_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_20 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_20.read(/*ram type address*/ (7 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_31_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_31 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_31.read(/*ram type address*/ (1 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_32_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_32 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_32.read(/*ram type address*/ (2 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_33_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_33 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_33.read(/*ram type address*/ (3 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_34_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_34 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_34.read(/*ram type address*/ (4 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_35_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_35 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_35.read(/*ram type address*/ (5 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_36_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_36 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_36.read(/*ram type address*/ (6 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_37_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_37 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_37.read(/*ram type address*/ (7 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_38_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_38 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_38.read(/*ram type address*/ (0 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_273_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_273 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_273.read(/*ram type address*/ (0 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_274_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_274 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_274.read(/*ram type address*/ (1 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_275_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_275 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_275.read(/*ram type address*/ (2 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_276_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_276 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_276.read(/*ram type address*/ (3 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_277_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_277 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_277.read(/*ram type address*/ (4 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_278_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_278 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_278.read(/*ram type address*/ (5 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_279_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_279 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_279.read(/*ram type address*/ (6 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_280_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_280 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_280.read(/*ram type address*/ (7 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_291_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_291 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_291.read(/*ram type address*/ (0 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_292_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_292 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_292.read(/*ram type address*/ (1 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_293_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_293 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_293.read(/*ram type address*/ (2 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_294_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_294 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_294.read(/*ram type address*/ (3 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_295_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_295 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_295.read(/*ram type address*/ (4 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_296_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_296 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_296.read(/*ram type address*/ (5 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_297_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_297 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_297.read(/*ram type address*/ (6 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_298_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_298 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_298.read(/*ram type address*/ (7 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_49_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_49 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_49.read(/*ram type address*/ (0 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_50_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_50 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_50.read(/*ram type address*/ (1 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_51_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_51 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_51.read(/*ram type address*/ (2 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_52_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_52 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_52.read(/*ram type address*/ (3 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_53_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_53 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_53.read(/*ram type address*/ (4 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_54_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_54 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_54.read(/*ram type address*/ (5 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_55_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_55 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_55.read(/*ram type address*/ (6 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_56_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_56 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_56.read(/*ram type address*/ (7 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_67_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_67 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_67.read(/*ram type address*/ (0 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_68_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_68 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_68.read(/*ram type address*/ (1 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_69_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_69 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_69.read(/*ram type address*/ (2 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_70_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_70 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_70.read(/*ram type address*/ (3 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_71_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_71 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_71.read(/*ram type address*/ (4 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_72_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_72 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_72.read(/*ram type address*/ (5 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_73_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_73 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_73.read(/*ram type address*/ (6 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_74_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_74 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_74.read(/*ram type address*/ (7 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_85_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_85 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_85.read(/*ram type address*/ (0 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_86_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_86 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_86.read(/*ram type address*/ (1 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_87_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_87 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_87.read(/*ram type address*/ (2 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_88_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_88 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_88.read(/*ram type address*/ (3 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_89_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_89 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_89.read(/*ram type address*/ (4 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_90_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_90 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_90.read(/*ram type address*/ (5 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_91_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_91 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_91.read(/*ram type address*/ (6 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_92_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_92 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_92.read(/*ram type address*/ (7 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_103_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_103 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_103.read(/*ram type address*/ (0 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_104_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_104 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_104.read(/*ram type address*/ (1 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_105_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_105 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_105.read(/*ram type address*/ (2 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_106_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_106 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_106.read(/*ram type address*/ (3 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_107_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_107 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_107.read(/*ram type address*/ (4 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_108_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_108 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_108.read(/*ram type address*/ (5 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_109_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_109 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_109.read(/*ram type address*/ (6 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_110_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_110 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_110.read(/*ram type address*/ (7 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_121_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_121 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_121.read(/*ram type address*/ (0 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_122_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_122 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_122.read(/*ram type address*/ (1 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_123_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_123 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_123.read(/*ram type address*/ (2 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_124_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_124 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_124.read(/*ram type address*/ (3 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_125_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_125 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_125.read(/*ram type address*/ (4 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_126_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_126 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_126.read(/*ram type address*/ (5 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_127_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_127 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_127.read(/*ram type address*/ (6 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_128_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_128 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_128.read(/*ram type address*/ (7 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0;
  return 0;
}

// # of bundles = 17
// op_hcompute_conv_stencil_10_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_139
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_140
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_141
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_142
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_143
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_144
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_145
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_146
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_139
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_140
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_141
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_142
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_143
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_144
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_145
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_146

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_139_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_139_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_139_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_140_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_140_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_140_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_141_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_141_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_141_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_142_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_142_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_142_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_143_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_143_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_143_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_144_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_144_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_144_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_145_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_145_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_145_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_146_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_146_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_146_res);
	return result;
}

// op_hcompute_conv_stencil_11_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_157
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_158
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_159
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_160
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_161
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_162
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_163
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_164
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_157
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_158
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_159
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_160
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_161
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_162
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_163
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_164

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_157_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_157_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_157_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_158_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_158_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_158_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_159_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_159_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_159_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_160_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_160_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_160_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_161_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_161_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_161_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_162_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_162_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_162_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_163_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_163_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_163_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_164_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_164_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_164_res);
	return result;
}

// op_hcompute_conv_stencil_12_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_175
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_176
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_177
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_178
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_179
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_180
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_181
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_182
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_175
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_176
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_177
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_178
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_179
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_180
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_181
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_182

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_175_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_175_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_175_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_176_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_176_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_176_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_177_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_177_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_177_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_178_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_178_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_178_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_179_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_179_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_179_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_180_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_180_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_180_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_181_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_181_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_181_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_182_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_182_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_182_res);
	return result;
}

// op_hcompute_conv_stencil_13_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_193
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_194
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_195
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_196
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_197
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_198
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_199
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_200
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_193
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_194
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_195
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_196
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_197
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_198
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_199
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_200

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_193_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_193_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_193_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_194_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_194_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_194_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_195_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_195_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_195_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_196_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_196_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_196_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_197_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_197_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_197_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_198_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_198_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_198_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_199_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_199_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_199_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_200_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_200_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_200_res);
	return result;
}

// op_hcompute_conv_stencil_14_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_211
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_212
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_213
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_214
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_215
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_216
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_217
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_218
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_211
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_212
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_213
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_214
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_215
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_216
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_217
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_218

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_211_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_211_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_211_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_212_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_212_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_212_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_213_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_213_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_213_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_214_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_214_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_214_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_215_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_215_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_215_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_216_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_216_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_216_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_217_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_217_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_217_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_218_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_218_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_218_res);
	return result;
}

// op_hcompute_conv_stencil_15_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_229
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_230
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_231
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_232
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_233
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_234
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_235
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_236
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_229
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_230
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_231
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_232
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_233
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_234
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_235
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_236

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_229_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_229_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_229_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_230_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_230_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_230_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_231_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_231_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_231_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_232_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_232_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_232_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_233_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_233_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_233_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_234_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_234_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_234_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_235_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_235_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_235_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_236_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_236_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_236_res);
	return result;
}

// op_hcompute_conv_stencil_16_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_247
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_248
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_249
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_250
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_251
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_252
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_253
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_254
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_247
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_248
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_249
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_250
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_251
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_252
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_253
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_254

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_247_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_247_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_247_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_248_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_248_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_248_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_249_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_249_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_249_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_250_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_250_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_250_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_251_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_251_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_251_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_252_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_252_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_252_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_253_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_253_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_253_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_254_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_254_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_254_res);
	return result;
}

// op_hcompute_conv_stencil_1_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_13
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_14
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_15
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_16
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_17
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_18
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_19
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_20
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_13
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_14
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_15
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_16
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_17
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_18
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_19
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_20

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_13_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_13_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_13_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_14_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_14_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_14_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_15_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_15_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_15_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_16_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_16_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_16_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_17_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_17_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_17_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_18_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_18_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_18_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_19_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_19_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_19_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_20_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_20_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_20_res);
	return result;
}

// op_hcompute_conv_stencil_2_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_31
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_32
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_33
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_34
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_35
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_36
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_37
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_38
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_31
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_32
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_33
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_34
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_35
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_36
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_37
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_38

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_31_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_31_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_31_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_32_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_32_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_32_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_33_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_33_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_33_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_34_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_34_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_34_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_35_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_35_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_35_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_36_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_36_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_36_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_37_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_37_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_37_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_38_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_38_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_38_res);
	return result;
}

// op_hcompute_conv_stencil_3_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_273
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_274
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_275
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_276
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_277
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_278
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_279
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_280
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_273
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_274
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_275
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_276
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_277
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_278
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_279
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_280

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_273_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_273_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_273_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_274_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_274_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_274_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_275_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_275_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_275_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_276_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_276_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_276_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_277_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_277_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_277_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_278_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_278_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_278_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_279_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_279_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_279_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_280_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_280_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_280_res);
	return result;
}

// op_hcompute_conv_stencil_4_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_291
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_292
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_293
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_294
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_295
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_296
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_297
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_298
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_291
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_292
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_293
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_294
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_295
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_296
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_297
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_298

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_291_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_291_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_291_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_292_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_292_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_292_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_293_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_293_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_293_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_294_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_294_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_294_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_295_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_295_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_295_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_296_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_296_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_296_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_297_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_297_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_297_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_298_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_298_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_298_res);
	return result;
}

// op_hcompute_conv_stencil_5_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_49
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_50
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_51
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_52
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_53
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_54
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_55
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_56
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_49
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_50
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_51
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_52
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_53
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_54
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_55
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_56

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_49_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_49_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_49_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_50_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_50_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_50_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_51_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_51_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_51_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_52_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_52_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_52_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_53_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_53_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_53_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_54_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_54_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_54_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_55_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_55_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_55_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_56_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_56_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_56_res);
	return result;
}

// op_hcompute_conv_stencil_6_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_67
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_68
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_69
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_70
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_71
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_72
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_73
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_74
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_67
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_68
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_69
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_70
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_71
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_72
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_73
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_74

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_67_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_67_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_67_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_68_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_68_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_68_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_69_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_69_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_69_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_70_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_70_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_70_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_71_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_71_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_71_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_72_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_72_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_72_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_73_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_73_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_73_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_74_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_74_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_74_res);
	return result;
}

// op_hcompute_conv_stencil_7_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_85
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_86
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_87
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_88
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_89
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_90
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_91
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_92
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_85
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_86
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_87
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_88
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_89
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_90
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_91
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_92

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_85_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_85_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_85_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_86_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_86_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_86_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_87_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_87_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_87_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_88_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_88_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_88_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_89_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_89_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_89_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_90_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_90_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_90_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_91_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_91_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_91_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_92_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_92_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_92_res);
	return result;
}

// op_hcompute_conv_stencil_8_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_103
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_104
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_105
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_106
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_107
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_108
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_109
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_110
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_103
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_104
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_105
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_106
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_107
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_108
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_109
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_110

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_103_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_103_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_103_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_104_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_104_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_104_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_105_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_105_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_105_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_106_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_106_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_106_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_107_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_107_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_107_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_108_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_108_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_108_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_109_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_109_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_109_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_110_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_110_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_110_res);
	return result;
}

// op_hcompute_conv_stencil_9_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_121
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_122
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_123
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_124
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_125
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_126
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_127
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_128
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_121
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_122
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_123
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_124
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_125
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_126
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_127
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_128

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_121_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_121_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_121_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_122_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_122_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_122_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_123_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_123_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_123_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_124_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_124_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_124_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_125_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_125_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_125_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_126_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_126_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_126_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_127_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_127_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_127_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_128_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_128_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_128_res);
	return result;
}

// op_hcompute_hw_kernel_stencil_write
//	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0
inline void hw_kernel_stencil_op_hcompute_hw_kernel_stencil_write_bundle_write(hw_uint<16>& op_hcompute_hw_kernel_stencil_write, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z, int dynamic_address) {
	hw_uint<16> hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_res = op_hcompute_hw_kernel_stencil_write.extract<0, 15>();
	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_0_res, hw_kernel_stencil, root, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z, dynamic_address);
}



// Operation logic
inline void op_hcompute_hw_kernel_stencil(HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */kernel_copy_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z) {
  // Dynamic address computation

	// Consume: kernel_copy_stencil
	auto kernel_copy_stencil_hw_kernel_s0_z_c__hw_kernel_s0_w_c__hw_kernel_s0_x_c__hw_kernel_s0_y_value = kernel_copy_stencil.read();
	auto compute_result = hcompute_hw_kernel_stencil(kernel_copy_stencil_hw_kernel_s0_z_c__hw_kernel_s0_w_c__hw_kernel_s0_x_c__hw_kernel_s0_y_value);
	// Produce: hw_kernel_stencil
	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_write_bundle_write(/* arg names */compute_result, hw_kernel_stencil, root, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil(conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w) {
  // Dynamic address computation

	auto compute_result = hcompute_conv_stencil();
	// Produce: conv_stencil
	conv_stencil_op_hcompute_conv_stencil_write_bundle_write(/* arg names */compute_result, conv_stencil, root, conv_s0_y, conv_s0_x, conv_s0_w, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__0_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__0_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__0_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__0_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__1_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_1_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_1_c__1_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__1_value, hw_input_stencil_1_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_1_c__1_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__4_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__4_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__4_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__4_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__5_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__5_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__5_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__5_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__6_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__6_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__6_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__6_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__7_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__7_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__7_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__7_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__8_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__8_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__8_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__8_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__9_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__9_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__9_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__9_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__10_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__10_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__10_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__10_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__11_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__11_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__11_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__11_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__12_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_3_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_3_c__12_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__12_value, hw_input_stencil_3_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_3_c__12_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__13_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__13_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__13_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__13_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__14_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__14_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__14_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__14_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__15_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__15_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__15_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__15_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_hw_output_stencil(conv_stencil_cache& conv_stencil, HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */hw_output_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi) {
  // Dynamic address computation

	// Consume: conv_stencil
	auto conv_stencil_hw_output_s0_x_xi_c__hw_output_s0_y_yi_c__hw_output_s0_w_value = conv_stencil_op_hcompute_hw_output_stencil_read_bundle_read(conv_stencil/* source_delay */, root, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_hw_output_stencil(conv_stencil_hw_output_s0_x_xi_c__hw_output_s0_y_yi_c__hw_output_s0_w_value);
	// Produce: hw_output_stencil
	hw_output_stencil.write(compute_result);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void load_to_conv_stencil_rb_at_conv_s1_x3(conv_stencil_cache& conv_stencil, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2) {
  // Dynamic address computation

	// Consume: conv_stencil
	auto conv_stencil_conv_stencil_ld0__p__0_c__conv_stencil_ld1__p__conv_s1_y_c__conv_stencil_ld2__p__0_value = conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_read_bundle_read(conv_stencil/* source_delay */, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_write_bundle_write(/* arg names */conv_stencil_conv_stencil_ld0__p__0_c__conv_stencil_ld1__p__conv_s1_y_c__conv_stencil_ld2__p__0_value, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void load_to_conv_stencil_rb_at_conv_s1_x7(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_stencil_ld4__p__conv_s1_x_c__conv_stencil_ld5__p__conv_s1_y_c__conv_stencil_ld6__p__0_value = conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_write_bundle_write(/* arg names */conv_stencil_rb_at_conv_s1_x_conv_stencil_ld4__p__conv_s1_x_c__conv_stencil_ld5__p__conv_s1_y_c__conv_stencil_ld6__p__0_value, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_hw_input_stencil(HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */input_copy_stencil, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z) {
  // Dynamic address computation

	// Consume: input_copy_stencil
	auto input_copy_stencil_hw_input_s0_z_c__hw_input_s0_x_c__hw_input_s0_y_value = input_copy_stencil.read();
	auto compute_result = hcompute_hw_input_stencil(input_copy_stencil_hw_input_s0_z_c__hw_input_s0_x_c__hw_input_s0_y_value);
	// Produce: hw_input_stencil
	hw_input_stencil_op_hcompute_hw_input_stencil_write_bundle_write(/* arg names */compute_result, hw_input_stencil, root, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__2_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__2_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__2_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__2_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__3_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__3_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__3_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__3_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

// Driver function
void unoptimized_resnet(HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */input_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */kernel_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */hw_output_stencil) {

#ifndef __VIVADO_SYNTH__
  ofstream debug_file("unoptimized_resnet_debug.csv");
  global_debug_handle = &debug_file;
#endif //__VIVADO_SYNTH__
  conv_stencil_cache conv_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  conv_stencil_rb_at_conv_s1_x_cache conv_stencil_rb_at_conv_s1_x;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  hw_input_stencil_cache hw_input_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  hw_kernel_stencil_cache hw_kernel_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#pragma HLS inline recursive
#endif // __VIVADO_SYNTH__

// schedule: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 6, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 9, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 8, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> [0, 0, 3, conv_s1_y, 0, 0, 0, 0, 0, conv_stencil_ld2, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15; load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 1, 0, 0, 0, 0, conv_stencil_ld6, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15; op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 11, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 10, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 4, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil[root = 0, conv_s0_y, conv_s0_x, conv_s0_w] -> [0, 0, 2, conv_s0_y, 0, conv_s0_x, 0, conv_s0_w, 0, 0, 0, 0, 0] : 0 <= conv_s0_y <= 27 and 0 <= conv_s0_x <= 27 and 0 <= conv_s0_w <= 15; op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 15, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 12, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 1, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 7, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 13, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> [0, 0, 4, hw_output_s0_w, 0, hw_output_s0_y_yi, 0, hw_output_s0_x_xi, 0, 0, 0, 0, 0] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27; op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 2, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 3, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> [0, 0, 0, hw_input_s0_y, 0, hw_input_s0_x, 0, hw_input_s0_z, 0, 0, 0, 0, 0] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7; op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> [0, 0, 1, hw_kernel_s0_y, 0, hw_kernel_s0_x, 0, hw_kernel_s0_w, 0, hw_kernel_s0_z, 0, 0, 0] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7; op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 5, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 14, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
//   { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 6, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_7(((i12 == 0) && (i11 == 0) && (-6 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 9, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_10(((i12 == 0) && (i11 == 0) && (-9 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_1(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 8, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_9(((i12 == 0) && (i11 == 0) && (-8 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> [0, 0, 3, conv_s1_y, 0, 0, 0, 0, 0, conv_stencil_ld2, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15 }
// Condition for load_to_conv_stencil_rb_at_conv_s1_x3(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i7 == 0) && (i6 == 0) && (i5 == 0) && (i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i9 >= 0) && (15 - i9 >= 0)))
//   { load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 1, 0, 0, 0, 0, conv_stencil_ld6, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15 }
// Condition for load_to_conv_stencil_rb_at_conv_s1_x7(((i12 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i7 == 0) && (-1 + i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i11 >= 0) && (15 - i11 >= 0)))
//   { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 11, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_12(((i12 == 0) && (i11 == 0) && (-11 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 10, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_11(((i12 == 0) && (i11 == 0) && (-10 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 4, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_5(((i12 == 0) && (i11 == 0) && (-4 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil[root = 0, conv_s0_y, conv_s0_x, conv_s0_w] -> [0, 0, 2, conv_s0_y, 0, conv_s0_x, 0, conv_s0_w, 0, 0, 0, 0, 0] : 0 <= conv_s0_y <= 27 and 0 <= conv_s0_x <= 27 and 0 <= conv_s0_w <= 15 }
// Condition for op_hcompute_conv_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-2 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (15 - i7 >= 0)))
//   { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 15, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_16(((i12 == 0) && (i11 == 0) && (-15 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 12, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_13(((i12 == 0) && (i11 == 0) && (-12 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 1, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_2(((i12 == 0) && (i11 == 0) && (-1 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 7, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_8(((i12 == 0) && (i11 == 0) && (-7 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 13, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_14(((i12 == 0) && (i11 == 0) && (-13 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> [0, 0, 4, hw_output_s0_w, 0, hw_output_s0_y_yi, 0, hw_output_s0_x_xi, 0, 0, 0, 0, 0] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
// Condition for op_hcompute_hw_output_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-4 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (15 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (27 - i7 >= 0)))
//   { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 2, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_3(((i12 == 0) && (i11 == 0) && (-2 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 3, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_4(((i12 == 0) && (i11 == 0) && (-3 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> [0, 0, 0, hw_input_s0_y, 0, hw_input_s0_x, 0, hw_input_s0_z, 0, 0, 0, 0, 0] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7 }
// Condition for op_hcompute_hw_input_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (29 - i3 >= 0) && (i5 >= 0) && (29 - i5 >= 0) && (i7 >= 0) && (7 - i7 >= 0)))
//   { op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> [0, 0, 1, hw_kernel_s0_y, 0, hw_kernel_s0_x, 0, hw_kernel_s0_w, 0, hw_kernel_s0_z, 0, 0, 0] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7 }
// Condition for op_hcompute_hw_kernel_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-1 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (2 - i3 >= 0) && (i5 >= 0) && (2 - i5 >= 0) && (i7 >= 0) && (15 - i7 >= 0) && (i9 >= 0) && (7 - i9 >= 0)))
//   { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 5, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_6(((i12 == 0) && (i11 == 0) && (-5 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 14, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_15(((i12 == 0) && (i11 == 0) && (-14 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))

  /*
{
  for (int c3 = 0; c3 <= 29; c3 += 1)
    for (int c5 = 0; c5 <= 29; c5 += 1)
      for (int c7 = 0; c7 <= 7; c7 += 1)
        op_hcompute_hw_input_stencil(0, c3, c5, c7);
  for (int c3 = 0; c3 <= 2; c3 += 1)
    for (int c5 = 0; c5 <= 2; c5 += 1)
      for (int c7 = 0; c7 <= 15; c7 += 1)
        for (int c9 = 0; c9 <= 7; c9 += 1)
          op_hcompute_hw_kernel_stencil(0, c3, c5, c7, c9);
  for (int c3 = 0; c3 <= 27; c3 += 1)
    for (int c5 = 0; c5 <= 27; c5 += 1)
      for (int c7 = 0; c7 <= 15; c7 += 1)
        op_hcompute_conv_stencil(0, c3, c5, c7);
  for (int c3 = 0; c3 <= 27; c3 += 1) {
    for (int c9 = 0; c9 <= 15; c9 += 1)
      load_to_conv_stencil_rb_at_conv_s1_x3(0, c3, 0, 0, c9);
    for (int c5 = 0; c5 <= 27; c5 += 1) {
      for (int c7 = 0; c7 <= 2; c7 += 1)
        for (int c9 = 0; c9 <= 2; c9 += 1) {
          op_hcompute_conv_stencil_1(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_2(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_3(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_4(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_5(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_6(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_7(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_8(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_9(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_10(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_11(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_12(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_13(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_14(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_15(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_16(0, c3, c5, c7, c9);
        }
      for (int c11 = 0; c11 <= 15; c11 += 1)
        load_to_conv_stencil_rb_at_conv_s1_x7(0, c3, c5, 0, 0, c11);
    }
  }
  for (int c3 = 0; c3 <= 15; c3 += 1)
    for (int c5 = 0; c5 <= 27; c5 += 1)
      for (int c7 = 0; c7 <= 27; c7 += 1)
        op_hcompute_hw_output_stencil(0, c3, c5, c7);
}

  */
	{
	  for (int c3 = 0; c3 <= 29; c3 += 1)
	    for (int c5 = 0; c5 <= 29; c5 += 1)
	      for (int c7 = 0; c7 <= 7; c7 += 1)
	        op_hcompute_hw_input_stencil(input_copy_stencil /* buf name */, hw_input_stencil, 0, c3, c5, c7);
	  for (int c3 = 0; c3 <= 2; c3 += 1)
	    for (int c5 = 0; c5 <= 2; c5 += 1)
	      for (int c7 = 0; c7 <= 15; c7 += 1)
	        for (int c9 = 0; c9 <= 7; c9 += 1)
	          op_hcompute_hw_kernel_stencil(kernel_copy_stencil /* buf name */, hw_kernel_stencil, 0, c3, c5, c7, c9);
	  for (int c3 = 0; c3 <= 27; c3 += 1)
	    for (int c5 = 0; c5 <= 27; c5 += 1)
	      for (int c7 = 0; c7 <= 15; c7 += 1)
	        op_hcompute_conv_stencil(conv_stencil, 0, c3, c5, c7);
	  for (int c3 = 0; c3 <= 27; c3 += 1) {
	    for (int c9 = 0; c9 <= 15; c9 += 1)
	      load_to_conv_stencil_rb_at_conv_s1_x3(conv_stencil /* buf name */, conv_stencil_rb_at_conv_s1_x, 0, c3, 0, 0, c9);
	    for (int c5 = 0; c5 <= 27; c5 += 1) {
	      for (int c7 = 0; c7 <= 2; c7 += 1)
	        for (int c9 = 0; c9 <= 2; c9 += 1) {
	          op_hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	        }
	      for (int c11 = 0; c11 <= 15; c11 += 1)
	        load_to_conv_stencil_rb_at_conv_s1_x7(conv_stencil_rb_at_conv_s1_x /* buf name */, 0, c3, c5, 0, 0, c11);
	    }
	  }
	  for (int c3 = 0; c3 <= 15; c3 += 1)
	    for (int c5 = 0; c5 <= 27; c5 += 1)
	      for (int c7 = 0; c7 <= 27; c7 += 1)
	        op_hcompute_hw_output_stencil(conv_stencil /* buf name */, hw_output_stencil, 0, c3, c5, c7);
	}
	
#ifndef __VIVADO_SYNTH__
  debug_file.close();
#endif //__VIVADO_SYNTH__
}

void unoptimized_resnet_wrapper(HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */input_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */kernel_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */hw_output_stencil, const int num_epochs) {

  for (int epoch = 0; epoch < num_epochs; epoch++) {
    unoptimized_resnet(input_copy_stencil, kernel_copy_stencil, hw_output_stencil);
  }
}
#ifdef __VIVADO_SYNTH__
  // { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> hw_output_stencil[hw_output_s0_x_xi, hw_output_s0_y_yi, hw_output_s0_w] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
const int op_hcompute_hw_output_stencil_write_pipe0_num_transfers = 12544;
  // { op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> input_copy_stencil[hw_input_s0_z, hw_input_s0_x, hw_input_s0_y] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7 }
const int op_hcompute_hw_input_stencil_read_pipe0_num_transfers = 7200;
  // { op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> kernel_copy_stencil[hw_kernel_s0_z, hw_kernel_s0_w, hw_kernel_s0_x, hw_kernel_s0_y] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7 }
const int op_hcompute_hw_kernel_stencil_read_pipe0_num_transfers = 1152;


extern "C" {

void unoptimized_resnet_accel(hw_uint<16>* op_hcompute_hw_input_stencil_read_pipe0, hw_uint<16>* op_hcompute_hw_kernel_stencil_read_pipe0, hw_uint<16>* op_hcompute_hw_output_stencil_write_pipe0, const int size) { 
#pragma HLS dataflow
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_input_stencil_read_pipe0 offset = slave depth = 65536 bundle = gmem0
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_kernel_stencil_read_pipe0 offset = slave depth = 65536 bundle = gmem1
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_output_stencil_write_pipe0 offset = slave depth = 65536 bundle = gmem2

#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_input_stencil_read_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_kernel_stencil_read_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_output_stencil_write_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = size bundle = control
#pragma HLS INTERFACE s_axilite port = return bundle = control


  // Pipeline # 0
  static HWStream<hw_uint<16> > op_hcompute_hw_input_stencil_read_pipe0_channel;
  static HWStream<hw_uint<16> > op_hcompute_hw_kernel_stencil_read_pipe0_channel;
  static HWStream<hw_uint<16> > op_hcompute_hw_output_stencil_write_pipe0_channel;

  burst_read<16>(op_hcompute_hw_input_stencil_read_pipe0, op_hcompute_hw_input_stencil_read_pipe0_channel, op_hcompute_hw_input_stencil_read_pipe0_num_transfers*size);
  burst_read<16>(op_hcompute_hw_kernel_stencil_read_pipe0, op_hcompute_hw_kernel_stencil_read_pipe0_channel, op_hcompute_hw_kernel_stencil_read_pipe0_num_transfers*size);

  unoptimized_resnet_wrapper(op_hcompute_hw_input_stencil_read_pipe0_channel, op_hcompute_hw_kernel_stencil_read_pipe0_channel, op_hcompute_hw_output_stencil_write_pipe0_channel, size);

  burst_write<16>(op_hcompute_hw_output_stencil_write_pipe0, op_hcompute_hw_output_stencil_write_pipe0_channel, op_hcompute_hw_output_stencil_write_pipe0_num_transfers*size);
}

}
#endif //__VIVADO_SYNTH__

