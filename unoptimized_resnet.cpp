#ifndef __VIVADO_SYNTH__
#include <fstream>
using namespace std;

  // Debug utility
  ofstream* global_debug_handle;

#endif //__VIVADO_SYNTH__
// compute file: resnet_compute.h
#include "resnet_compute.h"

#include "hw_classes.h"

struct conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*12544);
  }
  ~conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*12544);
  }
  ~conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_cache {
  // # of banks: 2
  conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_cache conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223;
  conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221_cache conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221;
};



inline void conv_stencil_op_hcompute_conv_stencil_224_write(hw_uint<16>& conv_stencil_op_hcompute_conv_stencil_224, conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w, int dynamic_address) {
  conv_stencil.conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223.write(conv_stencil_op_hcompute_conv_stencil_224, (conv_s0_x - 0) * 1 + (conv_s0_y - 0) * 28 + (conv_s0_w - 0) * 784);
  conv_stencil.conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221.write(conv_stencil_op_hcompute_conv_stencil_224, (conv_s0_x - 0) * 1 + (conv_s0_y - 0) * 28 + (conv_s0_w - 0) * 784);
}

inline hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_select(conv_stencil_cache& conv_stencil, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223 read pattern: { load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> conv_stencil[0, conv_s1_y, conv_stencil_ld2] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15 }
  auto value_conv_stencil_op_hcompute_conv_stencil_224 = conv_stencil.conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  return value_conv_stencil_op_hcompute_conv_stencil_224;
  return 0;
}

inline hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_221_select(conv_stencil_cache& conv_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_op_hcompute_hw_output_stencil_221 read pattern: { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> conv_stencil[hw_output_s0_x_xi, hw_output_s0_y_yi, hw_output_s0_w] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
  auto value_conv_stencil_op_hcompute_conv_stencil_224 = conv_stencil.conv_stencil_op_hcompute_conv_stencil_224_to_conv_stencil_op_hcompute_hw_output_stencil_221.read(/*ram type address*/ (hw_output_s0_x_xi - 0) * 1 + (hw_output_s0_y_yi - 0) * 28 + (hw_output_s0_w - 0) * 784);
  return value_conv_stencil_op_hcompute_conv_stencil_224;
  return 0;
}

// # of bundles = 3
// load_to_conv_stencil_rb_at_conv_s1_x3_read
//	conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223
inline hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_read_bundle_read(conv_stencil_cache& conv_stencil, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223

	hw_uint<16> result;
	hw_uint<16> conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_res = conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_select(conv_stencil, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, dynamic_address);
	set_at<0, 16>(result, conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_223_res);
	return result;
}

// op_hcompute_conv_stencil_write
//	conv_stencil_op_hcompute_conv_stencil_224
inline void conv_stencil_op_hcompute_conv_stencil_write_bundle_write(hw_uint<16>& op_hcompute_conv_stencil_write, conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w, int dynamic_address) {
	hw_uint<16> conv_stencil_op_hcompute_conv_stencil_224_res = op_hcompute_conv_stencil_write.extract<0, 15>();
	conv_stencil_op_hcompute_conv_stencil_224_write(conv_stencil_op_hcompute_conv_stencil_224_res, conv_stencil, root, conv_s0_y, conv_s0_x, conv_s0_w, dynamic_address);
}

// op_hcompute_hw_output_stencil_read
//	conv_stencil_op_hcompute_hw_output_stencil_221
inline hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_read_bundle_read(conv_stencil_cache& conv_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_op_hcompute_hw_output_stencil_221

	hw_uint<16> result;
	hw_uint<16> conv_stencil_op_hcompute_hw_output_stencil_221_res = conv_stencil_op_hcompute_hw_output_stencil_221_select(conv_stencil, root, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi, dynamic_address);
	set_at<0, 16>(result, conv_stencil_op_hcompute_hw_output_stencil_221_res);
	return result;
}

#include "hw_classes.h"

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 9]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache {
	// RAM Box: {[0, 27], [0, 27], [9, 9]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 10]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache {
	// RAM Box: {[0, 27], [0, 27], [10, 10]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 11]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache {
	// RAM Box: {[0, 27], [0, 27], [11, 11]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 12]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache {
	// RAM Box: {[0, 27], [0, 27], [12, 12]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 13]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache {
	// RAM Box: {[0, 27], [0, 27], [13, 13]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 14]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache {
	// RAM Box: {[0, 27], [0, 27], [14, 14]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 15]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache {
	// RAM Box: {[0, 27], [0, 27], [15, 15]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 0]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 0]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 1]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache {
	// RAM Box: {[0, 27], [0, 27], [1, 1]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 2]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache {
	// RAM Box: {[0, 27], [0, 27], [2, 2]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 3]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache {
	// RAM Box: {[0, 27], [0, 27], [3, 3]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 4]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache {
	// RAM Box: {[0, 27], [0, 27], [4, 4]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 5]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache {
	// RAM Box: {[0, 27], [0, 27], [5, 5]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 6]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache {
	// RAM Box: {[0, 27], [0, 27], [6, 6]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 7]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache {
	// RAM Box: {[0, 27], [0, 27], [7, 7]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache {
	// RAM Box: {[0, 27], [0, 27], [0, 8]}
	// Capacity: 12544
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[12544];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*12544);
  }
  ~conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 12544)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 12544);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache {
	// RAM Box: {[0, 27], [0, 27], [8, 8]}
	// Capacity: 784
#ifdef __VIVADO_SYNTH__
  hw_uint<32>  RAM[784];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<32> * RAM;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache() {
    RAM = (hw_uint<32> *) malloc(sizeof(hw_uint<32> )*784);
  }
  ~conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<32>  read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<32>  value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 784)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 784);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct conv_stencil_rb_at_conv_s1_x_cache {
  // # of banks: 48
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57;
  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21;
  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_cache conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21;
};



inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21.write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222, (0 - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld2 - 0) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 9) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 10) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 11) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 12) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 13) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 14) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 15) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 1) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 2) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 3) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 4) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 5) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 6) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 7) * 784);
}

inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_write(hw_uint<32> & conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 0) * 784);
  conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21.write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20, (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 8) * 784);
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226 read pattern: { load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, conv_stencil_ld6] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15 }
  if ((((-9 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38;
  }

  
  if ((((-10 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110;
  }

  
  if ((((-11 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128;
  }

  
  if ((((-12 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74;
  }

  
  if ((((-13 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92;
  }

  
  if ((((-14 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184;
  }

  
  if ((((-15 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148;
  }

  
  if ((((conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166;
  }

  
  if ((((-1 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202;
  }

  
  if ((((-2 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281;
  }

  
  if ((((-3 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2;
  }

  
  if ((((-4 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245;
  }

  
  if ((((-5 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263;
  }

  
  if ((((-6 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227;
  }

  
  if ((((-7 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56;
  }

  
  if ((((-8 + conv_stencil_ld6 == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (conv_stencil_ld6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 9] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (9 - 9) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 10] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (10 - 10) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 11] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (11 - 11) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 12] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (12 - 12) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 13] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (13 - 13) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 14] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (14 - 14) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 15] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (15 - 15) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (0 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 1] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (1 - 1) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 2] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (2 - 2) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 3] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (3 - 3) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 4] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (4 - 4) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 5] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (5 - 5) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 6] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (6 - 6) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 7] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (7 - 7) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56;
  }

  
  return 0;
}

inline hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_select(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> conv_stencil_rb_at_conv_s1_x[conv_s1_x, conv_s1_y, 8] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  if ((((conv_s1_r_x == 0) && (conv_s1_r_y == 0) && (conv_s1_x == 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 0) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222;
  }

  
  if ((((-1 + conv_s1_r_x >= 0)) || ((conv_s1_r_x == 0) && (-1 + conv_s1_r_y >= 0)))) {
    auto value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20 = conv_stencil_rb_at_conv_s1_x.conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_to_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21.read(/*ram type address*/ (conv_s1_x - 0) * 1 + (conv_s1_y - 0) * 28 + (8 - 8) * 784);
    return value_conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20;
  }

  
  return 0;
}

// # of bundles = 35
// load_to_conv_stencil_rb_at_conv_s1_x3_write
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222
inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_write_bundle_write(hw_uint<32>& load_to_conv_stencil_rb_at_conv_s1_x3_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_res = load_to_conv_stencil_rb_at_conv_s1_x3_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_222_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, dynamic_address);
}

// load_to_conv_stencil_rb_at_conv_s1_x7_read
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_res = conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_226_res);
	return result;
}

// load_to_conv_stencil_rb_at_conv_s1_x7_write
//	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225
inline void conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_write_bundle_write(hw_uint<32>& load_to_conv_stencil_rb_at_conv_s1_x7_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225_res = load_to_conv_stencil_rb_at_conv_s1_x7_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225_write(conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_225_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, dynamic_address);
}

// op_hcompute_conv_stencil_10_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_39_res);
	return result;
}

// op_hcompute_conv_stencil_10_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_10_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_res = op_hcompute_conv_stencil_10_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_38_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_11_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_111_res);
	return result;
}

// op_hcompute_conv_stencil_11_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_11_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_res = op_hcompute_conv_stencil_11_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_110_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_12_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_129_res);
	return result;
}

// op_hcompute_conv_stencil_12_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_12_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_res = op_hcompute_conv_stencil_12_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_128_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_13_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_75_res);
	return result;
}

// op_hcompute_conv_stencil_13_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_13_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_res = op_hcompute_conv_stencil_13_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_74_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_14_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_93_res);
	return result;
}

// op_hcompute_conv_stencil_14_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_14_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_res = op_hcompute_conv_stencil_14_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_92_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_15_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_185_res);
	return result;
}

// op_hcompute_conv_stencil_15_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_15_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_res = op_hcompute_conv_stencil_15_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_184_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_16_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_149_res);
	return result;
}

// op_hcompute_conv_stencil_16_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_16_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_res = op_hcompute_conv_stencil_16_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_148_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_1_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_167_res);
	return result;
}

// op_hcompute_conv_stencil_1_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_1_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_res = op_hcompute_conv_stencil_1_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_166_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_2_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_203_res);
	return result;
}

// op_hcompute_conv_stencil_2_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_2_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_res = op_hcompute_conv_stencil_2_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_202_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_3_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_282_res);
	return result;
}

// op_hcompute_conv_stencil_3_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_3_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_res = op_hcompute_conv_stencil_3_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_281_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_4_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_3_res);
	return result;
}

// op_hcompute_conv_stencil_4_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_4_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_res = op_hcompute_conv_stencil_4_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_2_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_5_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_246_res);
	return result;
}

// op_hcompute_conv_stencil_5_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_5_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_res = op_hcompute_conv_stencil_5_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_245_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_6_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_264_res);
	return result;
}

// op_hcompute_conv_stencil_6_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_6_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_res = op_hcompute_conv_stencil_6_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_263_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_7_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_228_res);
	return result;
}

// op_hcompute_conv_stencil_7_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_7_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_res = op_hcompute_conv_stencil_7_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_227_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_8_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_57_res);
	return result;
}

// op_hcompute_conv_stencil_8_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_8_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_res = op_hcompute_conv_stencil_8_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_56_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

// op_hcompute_conv_stencil_9_read
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21
inline hw_uint<32> conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_read_bundle_read(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 1
    // conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21

	hw_uint<32> result;
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_res = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_select(conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 32>(result, conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_21_res);
	return result;
}

// op_hcompute_conv_stencil_9_write
//	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20
inline void conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_write_bundle_write(hw_uint<32>& op_hcompute_conv_stencil_9_write, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
	hw_uint<32>  conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_res = op_hcompute_conv_stencil_9_write.extract<0, 31>();
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_write(conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_20_res, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
}

#include "hw_classes.h"

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29_cache {
	// RAM Box: {[0, 7], [0, 29], [0, 29]}
	// Capacity: 7200
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[7200];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*7200);
  }
  ~hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 7200)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 7200);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_input_stencil_cache {
  // # of banks: 128
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28;
  hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29_cache hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29;
};



inline void hw_input_stencil_op_hcompute_hw_input_stencil_0_write(hw_uint<16>& hw_input_stencil_op_hcompute_hw_input_stencil_0, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z, int dynamic_address) {
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
  hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29.write(hw_input_stencil_op_hcompute_hw_input_stencil_0, (hw_input_s0_z - 0) * 1 + (hw_input_s0_x - 0) * 8 + (hw_input_s0_y - 0) * 240);
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_40_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_40 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_40.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_41_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_41 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_41.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_42_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_42 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_42.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_43_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_43 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_43.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_44_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_44 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_44.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_45_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_45 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_45.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_46_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_46 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_46.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_47_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_10_47 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_10_47.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_112_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_112 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_112.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_113_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_113 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_113.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_114_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_114 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_114.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_115_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_115 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_115.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_116_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_116 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_116.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_117_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_117 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_117.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_118_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_118 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_118.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_119_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_11_119 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_11_119.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_130_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_130 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_130.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_131_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_131 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_131.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_132_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_132 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_132.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_133_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_133 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_133.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_134_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_134 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_134.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_135_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_135 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_135.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_136_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_136 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_136.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_137_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_12_137 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_12_137.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_76_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_76 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_76.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_77_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_77 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_77.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_78_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_78 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_78.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_79_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_79 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_79.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_80_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_80 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_80.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_81_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_81 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_81.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_82_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_82 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_82.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_83_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_13_83 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_13_83.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_100_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_100 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_100.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_101_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_101 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_101.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_94_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_94 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_94.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_95_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_95 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_95.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_96_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_96 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_96.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_97_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_97 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_97.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_98_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_98 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_98.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_99_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_14_99 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_14_99.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_186_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_186 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_186.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_187_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_187 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_187.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_188_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_188 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_188.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_189_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_189 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_189.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_190_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_190 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_190.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_191_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_191 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_191.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_192_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_192 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_192.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_193_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_15_193 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_15_193.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_150_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_150 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_150.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_151_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_151 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_151.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_152_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_152 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_152.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_153_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_153 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_153.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_154_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_154 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_154.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_155_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_155 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_155.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_156_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_156 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_156.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_157_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_16_157 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_16_157.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_168_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_168 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_168.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_169_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_169 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_169.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_170_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_170 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_170.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_171_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_171 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_171.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_172_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_172 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_172.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_173_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_173 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_173.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_174_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_174 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_174.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_175_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_1_175 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_1_175.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_204_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_204 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_204.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_205_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_205 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_205.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_206_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_206 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_206.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_207_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_207 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_207.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_208_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_208 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_208.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_209_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_209 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_209.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_210_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_210 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_210.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_211_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_2_211 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_2_211.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_283_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_283 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_283.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_284_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_284 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_284.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_285_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_285 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_285.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_286_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_286 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_286.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_287_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_287 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_287.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_288_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_288 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_288.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_289_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_289 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_289.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_290_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_3_290 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_3_290.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_10_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_10 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_10.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_11_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_11 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_11.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_4_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_4 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_4.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_5_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_5 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_5.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_6_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_6 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_6.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_7_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_7 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_7.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_8_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_8 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_8.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_9_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_4_9 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_4_9.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_247_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_247 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_247.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_248_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_248 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_248.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_249_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_249 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_249.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_250_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_250 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_250.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_251_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_251 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_251.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_252_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_252 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_252.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_253_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_253 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_253.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_254_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_5_254 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_5_254.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_265_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_265 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_265.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_266_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_266 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_266.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_267_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_267 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_267.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_268_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_268 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_268.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_269_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_269 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_269.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_270_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_270 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_270.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_271_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_271 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_271.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_272_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_6_272 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_6_272.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_229_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_229 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_229.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_230_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_230 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_230.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_231_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_231 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_231.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_232_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_232 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_232.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_233_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_233 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_233.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_234_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_234 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_234.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_235_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_235 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_235.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_236_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_7_236 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_7_236.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_58_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_58 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_58.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_59_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_59 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_59.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_60_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_60 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_60.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_61_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_61 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_61.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_62_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_62 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_62.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_63_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_63 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_63.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_64_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_64 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_64.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_65_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_8_65 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_8_65.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_22_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_22 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[0, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_22.read(/*ram type address*/ (0 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_23_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_23 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[1, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_23.read(/*ram type address*/ (1 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_24_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_24 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[2, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_24.read(/*ram type address*/ (2 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_25_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_25 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[3, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_25.read(/*ram type address*/ (3 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_26_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_26 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[4, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_26.read(/*ram type address*/ (4 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_27_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_27 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[5, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_27.read(/*ram type address*/ (5 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_28_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_28 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[6, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_28.read(/*ram type address*/ (6 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

inline hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_29_select(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_input_stencil_op_hcompute_conv_stencil_9_29 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_input_stencil[7, conv_s1_x + conv_s1_r_x, conv_s1_y + conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_input_stencil_op_hcompute_hw_input_stencil_0 = hw_input_stencil.hw_input_stencil_op_hcompute_hw_input_stencil_0_to_hw_input_stencil_op_hcompute_conv_stencil_9_29.read(/*ram type address*/ (7 - 0) * 1 + (conv_s1_x + conv_s1_r_x - 0) * 8 + (conv_s1_y + conv_s1_r_y - 0) * 240);
  return value_hw_input_stencil_op_hcompute_hw_input_stencil_0;
  return 0;
}

// # of bundles = 17
// op_hcompute_conv_stencil_10_read
//	hw_input_stencil_op_hcompute_conv_stencil_10_40
//	hw_input_stencil_op_hcompute_conv_stencil_10_41
//	hw_input_stencil_op_hcompute_conv_stencil_10_42
//	hw_input_stencil_op_hcompute_conv_stencil_10_43
//	hw_input_stencil_op_hcompute_conv_stencil_10_44
//	hw_input_stencil_op_hcompute_conv_stencil_10_45
//	hw_input_stencil_op_hcompute_conv_stencil_10_46
//	hw_input_stencil_op_hcompute_conv_stencil_10_47
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_10_40
    // hw_input_stencil_op_hcompute_conv_stencil_10_41
    // hw_input_stencil_op_hcompute_conv_stencil_10_42
    // hw_input_stencil_op_hcompute_conv_stencil_10_43
    // hw_input_stencil_op_hcompute_conv_stencil_10_44
    // hw_input_stencil_op_hcompute_conv_stencil_10_45
    // hw_input_stencil_op_hcompute_conv_stencil_10_46
    // hw_input_stencil_op_hcompute_conv_stencil_10_47

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_40_res = hw_input_stencil_op_hcompute_conv_stencil_10_40_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_40_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_41_res = hw_input_stencil_op_hcompute_conv_stencil_10_41_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_41_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_42_res = hw_input_stencil_op_hcompute_conv_stencil_10_42_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_42_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_43_res = hw_input_stencil_op_hcompute_conv_stencil_10_43_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_43_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_44_res = hw_input_stencil_op_hcompute_conv_stencil_10_44_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_44_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_45_res = hw_input_stencil_op_hcompute_conv_stencil_10_45_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_45_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_46_res = hw_input_stencil_op_hcompute_conv_stencil_10_46_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_46_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_10_47_res = hw_input_stencil_op_hcompute_conv_stencil_10_47_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_10_47_res);
	return result;
}

// op_hcompute_conv_stencil_11_read
//	hw_input_stencil_op_hcompute_conv_stencil_11_112
//	hw_input_stencil_op_hcompute_conv_stencil_11_113
//	hw_input_stencil_op_hcompute_conv_stencil_11_114
//	hw_input_stencil_op_hcompute_conv_stencil_11_115
//	hw_input_stencil_op_hcompute_conv_stencil_11_116
//	hw_input_stencil_op_hcompute_conv_stencil_11_117
//	hw_input_stencil_op_hcompute_conv_stencil_11_118
//	hw_input_stencil_op_hcompute_conv_stencil_11_119
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_11_112
    // hw_input_stencil_op_hcompute_conv_stencil_11_113
    // hw_input_stencil_op_hcompute_conv_stencil_11_114
    // hw_input_stencil_op_hcompute_conv_stencil_11_115
    // hw_input_stencil_op_hcompute_conv_stencil_11_116
    // hw_input_stencil_op_hcompute_conv_stencil_11_117
    // hw_input_stencil_op_hcompute_conv_stencil_11_118
    // hw_input_stencil_op_hcompute_conv_stencil_11_119

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_112_res = hw_input_stencil_op_hcompute_conv_stencil_11_112_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_112_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_113_res = hw_input_stencil_op_hcompute_conv_stencil_11_113_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_113_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_114_res = hw_input_stencil_op_hcompute_conv_stencil_11_114_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_114_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_115_res = hw_input_stencil_op_hcompute_conv_stencil_11_115_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_115_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_116_res = hw_input_stencil_op_hcompute_conv_stencil_11_116_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_116_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_117_res = hw_input_stencil_op_hcompute_conv_stencil_11_117_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_117_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_118_res = hw_input_stencil_op_hcompute_conv_stencil_11_118_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_118_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_11_119_res = hw_input_stencil_op_hcompute_conv_stencil_11_119_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_11_119_res);
	return result;
}

// op_hcompute_conv_stencil_12_read
//	hw_input_stencil_op_hcompute_conv_stencil_12_130
//	hw_input_stencil_op_hcompute_conv_stencil_12_131
//	hw_input_stencil_op_hcompute_conv_stencil_12_132
//	hw_input_stencil_op_hcompute_conv_stencil_12_133
//	hw_input_stencil_op_hcompute_conv_stencil_12_134
//	hw_input_stencil_op_hcompute_conv_stencil_12_135
//	hw_input_stencil_op_hcompute_conv_stencil_12_136
//	hw_input_stencil_op_hcompute_conv_stencil_12_137
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_12_130
    // hw_input_stencil_op_hcompute_conv_stencil_12_131
    // hw_input_stencil_op_hcompute_conv_stencil_12_132
    // hw_input_stencil_op_hcompute_conv_stencil_12_133
    // hw_input_stencil_op_hcompute_conv_stencil_12_134
    // hw_input_stencil_op_hcompute_conv_stencil_12_135
    // hw_input_stencil_op_hcompute_conv_stencil_12_136
    // hw_input_stencil_op_hcompute_conv_stencil_12_137

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_130_res = hw_input_stencil_op_hcompute_conv_stencil_12_130_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_130_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_131_res = hw_input_stencil_op_hcompute_conv_stencil_12_131_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_131_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_132_res = hw_input_stencil_op_hcompute_conv_stencil_12_132_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_132_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_133_res = hw_input_stencil_op_hcompute_conv_stencil_12_133_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_133_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_134_res = hw_input_stencil_op_hcompute_conv_stencil_12_134_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_134_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_135_res = hw_input_stencil_op_hcompute_conv_stencil_12_135_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_135_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_136_res = hw_input_stencil_op_hcompute_conv_stencil_12_136_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_136_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_12_137_res = hw_input_stencil_op_hcompute_conv_stencil_12_137_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_12_137_res);
	return result;
}

// op_hcompute_conv_stencil_13_read
//	hw_input_stencil_op_hcompute_conv_stencil_13_76
//	hw_input_stencil_op_hcompute_conv_stencil_13_77
//	hw_input_stencil_op_hcompute_conv_stencil_13_78
//	hw_input_stencil_op_hcompute_conv_stencil_13_79
//	hw_input_stencil_op_hcompute_conv_stencil_13_80
//	hw_input_stencil_op_hcompute_conv_stencil_13_81
//	hw_input_stencil_op_hcompute_conv_stencil_13_82
//	hw_input_stencil_op_hcompute_conv_stencil_13_83
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_13_76
    // hw_input_stencil_op_hcompute_conv_stencil_13_77
    // hw_input_stencil_op_hcompute_conv_stencil_13_78
    // hw_input_stencil_op_hcompute_conv_stencil_13_79
    // hw_input_stencil_op_hcompute_conv_stencil_13_80
    // hw_input_stencil_op_hcompute_conv_stencil_13_81
    // hw_input_stencil_op_hcompute_conv_stencil_13_82
    // hw_input_stencil_op_hcompute_conv_stencil_13_83

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_76_res = hw_input_stencil_op_hcompute_conv_stencil_13_76_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_76_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_77_res = hw_input_stencil_op_hcompute_conv_stencil_13_77_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_77_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_78_res = hw_input_stencil_op_hcompute_conv_stencil_13_78_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_78_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_79_res = hw_input_stencil_op_hcompute_conv_stencil_13_79_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_79_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_80_res = hw_input_stencil_op_hcompute_conv_stencil_13_80_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_80_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_81_res = hw_input_stencil_op_hcompute_conv_stencil_13_81_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_81_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_82_res = hw_input_stencil_op_hcompute_conv_stencil_13_82_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_82_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_13_83_res = hw_input_stencil_op_hcompute_conv_stencil_13_83_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_13_83_res);
	return result;
}

// op_hcompute_conv_stencil_14_read
//	hw_input_stencil_op_hcompute_conv_stencil_14_94
//	hw_input_stencil_op_hcompute_conv_stencil_14_95
//	hw_input_stencil_op_hcompute_conv_stencil_14_96
//	hw_input_stencil_op_hcompute_conv_stencil_14_97
//	hw_input_stencil_op_hcompute_conv_stencil_14_98
//	hw_input_stencil_op_hcompute_conv_stencil_14_99
//	hw_input_stencil_op_hcompute_conv_stencil_14_100
//	hw_input_stencil_op_hcompute_conv_stencil_14_101
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_14_94
    // hw_input_stencil_op_hcompute_conv_stencil_14_95
    // hw_input_stencil_op_hcompute_conv_stencil_14_96
    // hw_input_stencil_op_hcompute_conv_stencil_14_97
    // hw_input_stencil_op_hcompute_conv_stencil_14_98
    // hw_input_stencil_op_hcompute_conv_stencil_14_99
    // hw_input_stencil_op_hcompute_conv_stencil_14_100
    // hw_input_stencil_op_hcompute_conv_stencil_14_101

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_94_res = hw_input_stencil_op_hcompute_conv_stencil_14_94_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_94_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_95_res = hw_input_stencil_op_hcompute_conv_stencil_14_95_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_95_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_96_res = hw_input_stencil_op_hcompute_conv_stencil_14_96_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_96_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_97_res = hw_input_stencil_op_hcompute_conv_stencil_14_97_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_97_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_98_res = hw_input_stencil_op_hcompute_conv_stencil_14_98_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_98_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_99_res = hw_input_stencil_op_hcompute_conv_stencil_14_99_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_99_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_100_res = hw_input_stencil_op_hcompute_conv_stencil_14_100_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_100_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_14_101_res = hw_input_stencil_op_hcompute_conv_stencil_14_101_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_14_101_res);
	return result;
}

// op_hcompute_conv_stencil_15_read
//	hw_input_stencil_op_hcompute_conv_stencil_15_186
//	hw_input_stencil_op_hcompute_conv_stencil_15_187
//	hw_input_stencil_op_hcompute_conv_stencil_15_188
//	hw_input_stencil_op_hcompute_conv_stencil_15_189
//	hw_input_stencil_op_hcompute_conv_stencil_15_190
//	hw_input_stencil_op_hcompute_conv_stencil_15_191
//	hw_input_stencil_op_hcompute_conv_stencil_15_192
//	hw_input_stencil_op_hcompute_conv_stencil_15_193
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_15_186
    // hw_input_stencil_op_hcompute_conv_stencil_15_187
    // hw_input_stencil_op_hcompute_conv_stencil_15_188
    // hw_input_stencil_op_hcompute_conv_stencil_15_189
    // hw_input_stencil_op_hcompute_conv_stencil_15_190
    // hw_input_stencil_op_hcompute_conv_stencil_15_191
    // hw_input_stencil_op_hcompute_conv_stencil_15_192
    // hw_input_stencil_op_hcompute_conv_stencil_15_193

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_186_res = hw_input_stencil_op_hcompute_conv_stencil_15_186_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_186_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_187_res = hw_input_stencil_op_hcompute_conv_stencil_15_187_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_187_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_188_res = hw_input_stencil_op_hcompute_conv_stencil_15_188_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_188_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_189_res = hw_input_stencil_op_hcompute_conv_stencil_15_189_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_189_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_190_res = hw_input_stencil_op_hcompute_conv_stencil_15_190_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_190_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_191_res = hw_input_stencil_op_hcompute_conv_stencil_15_191_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_191_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_192_res = hw_input_stencil_op_hcompute_conv_stencil_15_192_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_192_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_15_193_res = hw_input_stencil_op_hcompute_conv_stencil_15_193_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_15_193_res);
	return result;
}

// op_hcompute_conv_stencil_16_read
//	hw_input_stencil_op_hcompute_conv_stencil_16_150
//	hw_input_stencil_op_hcompute_conv_stencil_16_151
//	hw_input_stencil_op_hcompute_conv_stencil_16_152
//	hw_input_stencil_op_hcompute_conv_stencil_16_153
//	hw_input_stencil_op_hcompute_conv_stencil_16_154
//	hw_input_stencil_op_hcompute_conv_stencil_16_155
//	hw_input_stencil_op_hcompute_conv_stencil_16_156
//	hw_input_stencil_op_hcompute_conv_stencil_16_157
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_16_150
    // hw_input_stencil_op_hcompute_conv_stencil_16_151
    // hw_input_stencil_op_hcompute_conv_stencil_16_152
    // hw_input_stencil_op_hcompute_conv_stencil_16_153
    // hw_input_stencil_op_hcompute_conv_stencil_16_154
    // hw_input_stencil_op_hcompute_conv_stencil_16_155
    // hw_input_stencil_op_hcompute_conv_stencil_16_156
    // hw_input_stencil_op_hcompute_conv_stencil_16_157

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_150_res = hw_input_stencil_op_hcompute_conv_stencil_16_150_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_150_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_151_res = hw_input_stencil_op_hcompute_conv_stencil_16_151_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_151_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_152_res = hw_input_stencil_op_hcompute_conv_stencil_16_152_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_152_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_153_res = hw_input_stencil_op_hcompute_conv_stencil_16_153_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_153_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_154_res = hw_input_stencil_op_hcompute_conv_stencil_16_154_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_154_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_155_res = hw_input_stencil_op_hcompute_conv_stencil_16_155_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_155_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_156_res = hw_input_stencil_op_hcompute_conv_stencil_16_156_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_156_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_16_157_res = hw_input_stencil_op_hcompute_conv_stencil_16_157_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_16_157_res);
	return result;
}

// op_hcompute_conv_stencil_1_read
//	hw_input_stencil_op_hcompute_conv_stencil_1_168
//	hw_input_stencil_op_hcompute_conv_stencil_1_169
//	hw_input_stencil_op_hcompute_conv_stencil_1_170
//	hw_input_stencil_op_hcompute_conv_stencil_1_171
//	hw_input_stencil_op_hcompute_conv_stencil_1_172
//	hw_input_stencil_op_hcompute_conv_stencil_1_173
//	hw_input_stencil_op_hcompute_conv_stencil_1_174
//	hw_input_stencil_op_hcompute_conv_stencil_1_175
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_1_168
    // hw_input_stencil_op_hcompute_conv_stencil_1_169
    // hw_input_stencil_op_hcompute_conv_stencil_1_170
    // hw_input_stencil_op_hcompute_conv_stencil_1_171
    // hw_input_stencil_op_hcompute_conv_stencil_1_172
    // hw_input_stencil_op_hcompute_conv_stencil_1_173
    // hw_input_stencil_op_hcompute_conv_stencil_1_174
    // hw_input_stencil_op_hcompute_conv_stencil_1_175

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_168_res = hw_input_stencil_op_hcompute_conv_stencil_1_168_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_168_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_169_res = hw_input_stencil_op_hcompute_conv_stencil_1_169_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_169_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_170_res = hw_input_stencil_op_hcompute_conv_stencil_1_170_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_170_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_171_res = hw_input_stencil_op_hcompute_conv_stencil_1_171_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_171_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_172_res = hw_input_stencil_op_hcompute_conv_stencil_1_172_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_172_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_173_res = hw_input_stencil_op_hcompute_conv_stencil_1_173_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_173_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_174_res = hw_input_stencil_op_hcompute_conv_stencil_1_174_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_174_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_1_175_res = hw_input_stencil_op_hcompute_conv_stencil_1_175_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_1_175_res);
	return result;
}

// op_hcompute_conv_stencil_2_read
//	hw_input_stencil_op_hcompute_conv_stencil_2_204
//	hw_input_stencil_op_hcompute_conv_stencil_2_205
//	hw_input_stencil_op_hcompute_conv_stencil_2_206
//	hw_input_stencil_op_hcompute_conv_stencil_2_207
//	hw_input_stencil_op_hcompute_conv_stencil_2_208
//	hw_input_stencil_op_hcompute_conv_stencil_2_209
//	hw_input_stencil_op_hcompute_conv_stencil_2_210
//	hw_input_stencil_op_hcompute_conv_stencil_2_211
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_2_204
    // hw_input_stencil_op_hcompute_conv_stencil_2_205
    // hw_input_stencil_op_hcompute_conv_stencil_2_206
    // hw_input_stencil_op_hcompute_conv_stencil_2_207
    // hw_input_stencil_op_hcompute_conv_stencil_2_208
    // hw_input_stencil_op_hcompute_conv_stencil_2_209
    // hw_input_stencil_op_hcompute_conv_stencil_2_210
    // hw_input_stencil_op_hcompute_conv_stencil_2_211

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_204_res = hw_input_stencil_op_hcompute_conv_stencil_2_204_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_204_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_205_res = hw_input_stencil_op_hcompute_conv_stencil_2_205_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_205_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_206_res = hw_input_stencil_op_hcompute_conv_stencil_2_206_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_206_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_207_res = hw_input_stencil_op_hcompute_conv_stencil_2_207_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_207_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_208_res = hw_input_stencil_op_hcompute_conv_stencil_2_208_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_208_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_209_res = hw_input_stencil_op_hcompute_conv_stencil_2_209_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_209_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_210_res = hw_input_stencil_op_hcompute_conv_stencil_2_210_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_210_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_2_211_res = hw_input_stencil_op_hcompute_conv_stencil_2_211_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_2_211_res);
	return result;
}

// op_hcompute_conv_stencil_3_read
//	hw_input_stencil_op_hcompute_conv_stencil_3_283
//	hw_input_stencil_op_hcompute_conv_stencil_3_284
//	hw_input_stencil_op_hcompute_conv_stencil_3_285
//	hw_input_stencil_op_hcompute_conv_stencil_3_286
//	hw_input_stencil_op_hcompute_conv_stencil_3_287
//	hw_input_stencil_op_hcompute_conv_stencil_3_288
//	hw_input_stencil_op_hcompute_conv_stencil_3_289
//	hw_input_stencil_op_hcompute_conv_stencil_3_290
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_3_283
    // hw_input_stencil_op_hcompute_conv_stencil_3_284
    // hw_input_stencil_op_hcompute_conv_stencil_3_285
    // hw_input_stencil_op_hcompute_conv_stencil_3_286
    // hw_input_stencil_op_hcompute_conv_stencil_3_287
    // hw_input_stencil_op_hcompute_conv_stencil_3_288
    // hw_input_stencil_op_hcompute_conv_stencil_3_289
    // hw_input_stencil_op_hcompute_conv_stencil_3_290

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_283_res = hw_input_stencil_op_hcompute_conv_stencil_3_283_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_283_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_284_res = hw_input_stencil_op_hcompute_conv_stencil_3_284_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_284_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_285_res = hw_input_stencil_op_hcompute_conv_stencil_3_285_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_285_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_286_res = hw_input_stencil_op_hcompute_conv_stencil_3_286_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_286_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_287_res = hw_input_stencil_op_hcompute_conv_stencil_3_287_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_287_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_288_res = hw_input_stencil_op_hcompute_conv_stencil_3_288_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_288_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_289_res = hw_input_stencil_op_hcompute_conv_stencil_3_289_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_289_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_3_290_res = hw_input_stencil_op_hcompute_conv_stencil_3_290_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_3_290_res);
	return result;
}

// op_hcompute_conv_stencil_4_read
//	hw_input_stencil_op_hcompute_conv_stencil_4_4
//	hw_input_stencil_op_hcompute_conv_stencil_4_5
//	hw_input_stencil_op_hcompute_conv_stencil_4_6
//	hw_input_stencil_op_hcompute_conv_stencil_4_7
//	hw_input_stencil_op_hcompute_conv_stencil_4_8
//	hw_input_stencil_op_hcompute_conv_stencil_4_9
//	hw_input_stencil_op_hcompute_conv_stencil_4_10
//	hw_input_stencil_op_hcompute_conv_stencil_4_11
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_4_4
    // hw_input_stencil_op_hcompute_conv_stencil_4_5
    // hw_input_stencil_op_hcompute_conv_stencil_4_6
    // hw_input_stencil_op_hcompute_conv_stencil_4_7
    // hw_input_stencil_op_hcompute_conv_stencil_4_8
    // hw_input_stencil_op_hcompute_conv_stencil_4_9
    // hw_input_stencil_op_hcompute_conv_stencil_4_10
    // hw_input_stencil_op_hcompute_conv_stencil_4_11

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_4_res = hw_input_stencil_op_hcompute_conv_stencil_4_4_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_4_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_5_res = hw_input_stencil_op_hcompute_conv_stencil_4_5_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_5_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_6_res = hw_input_stencil_op_hcompute_conv_stencil_4_6_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_6_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_7_res = hw_input_stencil_op_hcompute_conv_stencil_4_7_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_7_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_8_res = hw_input_stencil_op_hcompute_conv_stencil_4_8_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_8_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_9_res = hw_input_stencil_op_hcompute_conv_stencil_4_9_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_9_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_10_res = hw_input_stencil_op_hcompute_conv_stencil_4_10_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_10_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_4_11_res = hw_input_stencil_op_hcompute_conv_stencil_4_11_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_4_11_res);
	return result;
}

// op_hcompute_conv_stencil_5_read
//	hw_input_stencil_op_hcompute_conv_stencil_5_247
//	hw_input_stencil_op_hcompute_conv_stencil_5_248
//	hw_input_stencil_op_hcompute_conv_stencil_5_249
//	hw_input_stencil_op_hcompute_conv_stencil_5_250
//	hw_input_stencil_op_hcompute_conv_stencil_5_251
//	hw_input_stencil_op_hcompute_conv_stencil_5_252
//	hw_input_stencil_op_hcompute_conv_stencil_5_253
//	hw_input_stencil_op_hcompute_conv_stencil_5_254
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_5_247
    // hw_input_stencil_op_hcompute_conv_stencil_5_248
    // hw_input_stencil_op_hcompute_conv_stencil_5_249
    // hw_input_stencil_op_hcompute_conv_stencil_5_250
    // hw_input_stencil_op_hcompute_conv_stencil_5_251
    // hw_input_stencil_op_hcompute_conv_stencil_5_252
    // hw_input_stencil_op_hcompute_conv_stencil_5_253
    // hw_input_stencil_op_hcompute_conv_stencil_5_254

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_247_res = hw_input_stencil_op_hcompute_conv_stencil_5_247_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_247_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_248_res = hw_input_stencil_op_hcompute_conv_stencil_5_248_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_248_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_249_res = hw_input_stencil_op_hcompute_conv_stencil_5_249_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_249_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_250_res = hw_input_stencil_op_hcompute_conv_stencil_5_250_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_250_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_251_res = hw_input_stencil_op_hcompute_conv_stencil_5_251_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_251_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_252_res = hw_input_stencil_op_hcompute_conv_stencil_5_252_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_252_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_253_res = hw_input_stencil_op_hcompute_conv_stencil_5_253_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_253_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_5_254_res = hw_input_stencil_op_hcompute_conv_stencil_5_254_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_5_254_res);
	return result;
}

// op_hcompute_conv_stencil_6_read
//	hw_input_stencil_op_hcompute_conv_stencil_6_265
//	hw_input_stencil_op_hcompute_conv_stencil_6_266
//	hw_input_stencil_op_hcompute_conv_stencil_6_267
//	hw_input_stencil_op_hcompute_conv_stencil_6_268
//	hw_input_stencil_op_hcompute_conv_stencil_6_269
//	hw_input_stencil_op_hcompute_conv_stencil_6_270
//	hw_input_stencil_op_hcompute_conv_stencil_6_271
//	hw_input_stencil_op_hcompute_conv_stencil_6_272
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_6_265
    // hw_input_stencil_op_hcompute_conv_stencil_6_266
    // hw_input_stencil_op_hcompute_conv_stencil_6_267
    // hw_input_stencil_op_hcompute_conv_stencil_6_268
    // hw_input_stencil_op_hcompute_conv_stencil_6_269
    // hw_input_stencil_op_hcompute_conv_stencil_6_270
    // hw_input_stencil_op_hcompute_conv_stencil_6_271
    // hw_input_stencil_op_hcompute_conv_stencil_6_272

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_265_res = hw_input_stencil_op_hcompute_conv_stencil_6_265_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_265_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_266_res = hw_input_stencil_op_hcompute_conv_stencil_6_266_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_266_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_267_res = hw_input_stencil_op_hcompute_conv_stencil_6_267_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_267_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_268_res = hw_input_stencil_op_hcompute_conv_stencil_6_268_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_268_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_269_res = hw_input_stencil_op_hcompute_conv_stencil_6_269_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_269_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_270_res = hw_input_stencil_op_hcompute_conv_stencil_6_270_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_270_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_271_res = hw_input_stencil_op_hcompute_conv_stencil_6_271_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_271_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_6_272_res = hw_input_stencil_op_hcompute_conv_stencil_6_272_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_6_272_res);
	return result;
}

// op_hcompute_conv_stencil_7_read
//	hw_input_stencil_op_hcompute_conv_stencil_7_229
//	hw_input_stencil_op_hcompute_conv_stencil_7_230
//	hw_input_stencil_op_hcompute_conv_stencil_7_231
//	hw_input_stencil_op_hcompute_conv_stencil_7_232
//	hw_input_stencil_op_hcompute_conv_stencil_7_233
//	hw_input_stencil_op_hcompute_conv_stencil_7_234
//	hw_input_stencil_op_hcompute_conv_stencil_7_235
//	hw_input_stencil_op_hcompute_conv_stencil_7_236
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_7_229
    // hw_input_stencil_op_hcompute_conv_stencil_7_230
    // hw_input_stencil_op_hcompute_conv_stencil_7_231
    // hw_input_stencil_op_hcompute_conv_stencil_7_232
    // hw_input_stencil_op_hcompute_conv_stencil_7_233
    // hw_input_stencil_op_hcompute_conv_stencil_7_234
    // hw_input_stencil_op_hcompute_conv_stencil_7_235
    // hw_input_stencil_op_hcompute_conv_stencil_7_236

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_229_res = hw_input_stencil_op_hcompute_conv_stencil_7_229_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_229_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_230_res = hw_input_stencil_op_hcompute_conv_stencil_7_230_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_230_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_231_res = hw_input_stencil_op_hcompute_conv_stencil_7_231_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_231_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_232_res = hw_input_stencil_op_hcompute_conv_stencil_7_232_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_232_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_233_res = hw_input_stencil_op_hcompute_conv_stencil_7_233_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_233_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_234_res = hw_input_stencil_op_hcompute_conv_stencil_7_234_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_234_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_235_res = hw_input_stencil_op_hcompute_conv_stencil_7_235_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_235_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_7_236_res = hw_input_stencil_op_hcompute_conv_stencil_7_236_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_7_236_res);
	return result;
}

// op_hcompute_conv_stencil_8_read
//	hw_input_stencil_op_hcompute_conv_stencil_8_58
//	hw_input_stencil_op_hcompute_conv_stencil_8_59
//	hw_input_stencil_op_hcompute_conv_stencil_8_60
//	hw_input_stencil_op_hcompute_conv_stencil_8_61
//	hw_input_stencil_op_hcompute_conv_stencil_8_62
//	hw_input_stencil_op_hcompute_conv_stencil_8_63
//	hw_input_stencil_op_hcompute_conv_stencil_8_64
//	hw_input_stencil_op_hcompute_conv_stencil_8_65
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_8_58
    // hw_input_stencil_op_hcompute_conv_stencil_8_59
    // hw_input_stencil_op_hcompute_conv_stencil_8_60
    // hw_input_stencil_op_hcompute_conv_stencil_8_61
    // hw_input_stencil_op_hcompute_conv_stencil_8_62
    // hw_input_stencil_op_hcompute_conv_stencil_8_63
    // hw_input_stencil_op_hcompute_conv_stencil_8_64
    // hw_input_stencil_op_hcompute_conv_stencil_8_65

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_58_res = hw_input_stencil_op_hcompute_conv_stencil_8_58_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_58_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_59_res = hw_input_stencil_op_hcompute_conv_stencil_8_59_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_59_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_60_res = hw_input_stencil_op_hcompute_conv_stencil_8_60_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_60_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_61_res = hw_input_stencil_op_hcompute_conv_stencil_8_61_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_61_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_62_res = hw_input_stencil_op_hcompute_conv_stencil_8_62_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_62_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_63_res = hw_input_stencil_op_hcompute_conv_stencil_8_63_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_63_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_64_res = hw_input_stencil_op_hcompute_conv_stencil_8_64_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_64_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_8_65_res = hw_input_stencil_op_hcompute_conv_stencil_8_65_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_8_65_res);
	return result;
}

// op_hcompute_conv_stencil_9_read
//	hw_input_stencil_op_hcompute_conv_stencil_9_22
//	hw_input_stencil_op_hcompute_conv_stencil_9_23
//	hw_input_stencil_op_hcompute_conv_stencil_9_24
//	hw_input_stencil_op_hcompute_conv_stencil_9_25
//	hw_input_stencil_op_hcompute_conv_stencil_9_26
//	hw_input_stencil_op_hcompute_conv_stencil_9_27
//	hw_input_stencil_op_hcompute_conv_stencil_9_28
//	hw_input_stencil_op_hcompute_conv_stencil_9_29
inline hw_uint<128> hw_input_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_input_stencil_cache& hw_input_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_input_stencil_op_hcompute_conv_stencil_9_22
    // hw_input_stencil_op_hcompute_conv_stencil_9_23
    // hw_input_stencil_op_hcompute_conv_stencil_9_24
    // hw_input_stencil_op_hcompute_conv_stencil_9_25
    // hw_input_stencil_op_hcompute_conv_stencil_9_26
    // hw_input_stencil_op_hcompute_conv_stencil_9_27
    // hw_input_stencil_op_hcompute_conv_stencil_9_28
    // hw_input_stencil_op_hcompute_conv_stencil_9_29

	hw_uint<128> result;
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_22_res = hw_input_stencil_op_hcompute_conv_stencil_9_22_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_22_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_23_res = hw_input_stencil_op_hcompute_conv_stencil_9_23_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_23_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_24_res = hw_input_stencil_op_hcompute_conv_stencil_9_24_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_24_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_25_res = hw_input_stencil_op_hcompute_conv_stencil_9_25_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_25_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_26_res = hw_input_stencil_op_hcompute_conv_stencil_9_26_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_26_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_27_res = hw_input_stencil_op_hcompute_conv_stencil_9_27_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_27_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_28_res = hw_input_stencil_op_hcompute_conv_stencil_9_28_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_28_res);
	hw_uint<16> hw_input_stencil_op_hcompute_conv_stencil_9_29_res = hw_input_stencil_op_hcompute_conv_stencil_9_29_select(hw_input_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_input_stencil_op_hcompute_conv_stencil_9_29_res);
	return result;
}

// op_hcompute_hw_input_stencil_write
//	hw_input_stencil_op_hcompute_hw_input_stencil_0
inline void hw_input_stencil_op_hcompute_hw_input_stencil_write_bundle_write(hw_uint<16>& op_hcompute_hw_input_stencil_write, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z, int dynamic_address) {
	hw_uint<16> hw_input_stencil_op_hcompute_hw_input_stencil_0_res = op_hcompute_hw_input_stencil_write.extract<0, 15>();
	hw_input_stencil_op_hcompute_hw_input_stencil_0_write(hw_input_stencil_op_hcompute_hw_input_stencil_0_res, hw_input_stencil, root, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z, dynamic_address);
}

#include "hw_classes.h"

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37_cache {
	// RAM Box: {[0, 7], [0, 15], [0, 2], [0, 2]}
	// Capacity: 1152
#ifdef __VIVADO_SYNTH__
  hw_uint<16> RAM[1152];
#endif //__VIVADO_SYNTH__
#ifndef __VIVADO_SYNTH__
  hw_uint<16>* RAM;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37_cache() {
    RAM = (hw_uint<16>*) malloc(sizeof(hw_uint<16>)*1152);
  }
  ~hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37_cache() {
    free(RAM);
  }
#endif //__VIVADO_SYNTH__
  inline hw_uint<16> read(const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Read error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    return RAM[addr];
  }



	inline void write(const hw_uint<16> value, const int addr) {
#ifndef __VIVADO_SYNTH__
    if (addr < 0 || !(addr < 1152)) {
    cout << "Write error: Address " << addr << " is out of bounds" << endl;
    }
    assert(addr < 1152);
    assert(addr >= 0);
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
    RAM[addr] = value;
  }

};

struct hw_kernel_stencil_cache {
  // # of banks: 128
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36;
  hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37_cache hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37;
};



inline void hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_write(hw_uint<16>& hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z, int dynamic_address) {
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
  hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37.write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146, (hw_kernel_s0_z - 0) * 1 + (hw_kernel_s0_w - 0) * 8 + (hw_kernel_s0_x - 0) * 128 + (hw_kernel_s0_y - 0) * 384);
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_48_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_48 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_48.read(/*ram type address*/ (0 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_49_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_49 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_49.read(/*ram type address*/ (1 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_50_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_50 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_50.read(/*ram type address*/ (2 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_51_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_51 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_51.read(/*ram type address*/ (3 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_52_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_52 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_52.read(/*ram type address*/ (4 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_53_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_53 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_53.read(/*ram type address*/ (5 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_54_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_54 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_54.read(/*ram type address*/ (6 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_55_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_10_55 read pattern: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 9, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_10_55.read(/*ram type address*/ (7 - 0) * 1 + (9 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_120_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_120 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_120.read(/*ram type address*/ (0 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_121_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_121 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_121.read(/*ram type address*/ (1 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_122_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_122 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_122.read(/*ram type address*/ (2 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_123_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_123 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_123.read(/*ram type address*/ (3 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_124_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_124 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_124.read(/*ram type address*/ (4 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_125_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_125 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_125.read(/*ram type address*/ (5 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_126_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_126 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_126.read(/*ram type address*/ (6 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_127_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_11_127 read pattern: { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 10, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_11_127.read(/*ram type address*/ (7 - 0) * 1 + (10 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_138_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_138 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_138.read(/*ram type address*/ (0 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_139_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_139 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_139.read(/*ram type address*/ (1 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_140_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_140 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_140.read(/*ram type address*/ (2 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_141_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_141 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_141.read(/*ram type address*/ (3 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_142_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_142 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_142.read(/*ram type address*/ (4 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_143_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_143 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_143.read(/*ram type address*/ (5 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_144_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_144 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_144.read(/*ram type address*/ (6 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_145_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_12_145 read pattern: { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 11, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_12_145.read(/*ram type address*/ (7 - 0) * 1 + (11 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_84_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_84 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_84.read(/*ram type address*/ (3 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_85_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_85 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_85.read(/*ram type address*/ (4 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_86_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_86 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_86.read(/*ram type address*/ (5 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_87_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_87 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_87.read(/*ram type address*/ (6 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_88_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_88 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_88.read(/*ram type address*/ (7 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_89_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_89 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_89.read(/*ram type address*/ (0 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_90_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_90 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_90.read(/*ram type address*/ (1 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_91_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_13_91 read pattern: { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 12, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_13_91.read(/*ram type address*/ (2 - 0) * 1 + (12 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_102_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_102 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_102.read(/*ram type address*/ (0 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_103_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_103 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_103.read(/*ram type address*/ (1 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_104_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_104 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_104.read(/*ram type address*/ (2 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_105_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_105 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_105.read(/*ram type address*/ (3 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_106_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_106 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_106.read(/*ram type address*/ (4 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_107_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_107 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_107.read(/*ram type address*/ (5 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_108_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_108 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_108.read(/*ram type address*/ (6 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_109_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_14_109 read pattern: { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 13, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_14_109.read(/*ram type address*/ (7 - 0) * 1 + (13 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_194_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_194 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_194.read(/*ram type address*/ (0 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_195_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_195 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_195.read(/*ram type address*/ (1 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_196_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_196 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_196.read(/*ram type address*/ (2 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_197_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_197 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_197.read(/*ram type address*/ (3 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_198_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_198 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_198.read(/*ram type address*/ (4 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_199_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_199 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_199.read(/*ram type address*/ (5 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_200_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_200 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_200.read(/*ram type address*/ (6 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_201_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_15_201 read pattern: { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 14, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_15_201.read(/*ram type address*/ (7 - 0) * 1 + (14 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_158_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_158 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_158.read(/*ram type address*/ (0 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_159_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_159 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_159.read(/*ram type address*/ (1 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_160_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_160 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_160.read(/*ram type address*/ (2 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_161_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_161 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_161.read(/*ram type address*/ (3 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_162_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_162 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_162.read(/*ram type address*/ (4 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_163_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_163 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_163.read(/*ram type address*/ (5 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_164_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_164 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_164.read(/*ram type address*/ (6 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_165_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_16_165 read pattern: { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 15, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_16_165.read(/*ram type address*/ (7 - 0) * 1 + (15 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_176_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_176 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_176.read(/*ram type address*/ (0 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_177_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_177 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_177.read(/*ram type address*/ (1 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_178_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_178 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_178.read(/*ram type address*/ (2 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_179_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_179 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_179.read(/*ram type address*/ (3 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_180_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_180 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_180.read(/*ram type address*/ (4 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_181_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_181 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_181.read(/*ram type address*/ (5 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_182_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_182 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_182.read(/*ram type address*/ (6 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_183_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_1_183 read pattern: { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 0, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_1_183.read(/*ram type address*/ (7 - 0) * 1 + (0 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_212_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_212 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_212.read(/*ram type address*/ (1 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_213_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_213 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_213.read(/*ram type address*/ (2 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_214_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_214 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_214.read(/*ram type address*/ (3 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_215_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_215 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_215.read(/*ram type address*/ (4 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_216_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_216 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_216.read(/*ram type address*/ (5 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_217_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_217 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_217.read(/*ram type address*/ (6 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_218_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_218 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_218.read(/*ram type address*/ (7 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_219_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_2_219 read pattern: { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 1, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_2_219.read(/*ram type address*/ (0 - 0) * 1 + (1 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_291_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_291 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_291.read(/*ram type address*/ (0 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_292_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_292 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_292.read(/*ram type address*/ (1 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_293_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_293 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_293.read(/*ram type address*/ (2 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_294_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_294 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_294.read(/*ram type address*/ (3 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_295_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_295 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_295.read(/*ram type address*/ (4 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_296_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_296 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_296.read(/*ram type address*/ (5 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_297_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_297 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_297.read(/*ram type address*/ (6 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_298_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_3_298 read pattern: { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 2, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_3_298.read(/*ram type address*/ (7 - 0) * 1 + (2 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_12_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_12 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_12.read(/*ram type address*/ (0 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_13_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_13 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_13.read(/*ram type address*/ (1 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_14_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_14 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_14.read(/*ram type address*/ (2 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_15_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_15 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_15.read(/*ram type address*/ (3 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_16_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_16 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_16.read(/*ram type address*/ (4 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_17_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_17 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_17.read(/*ram type address*/ (5 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_18_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_18 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_18.read(/*ram type address*/ (6 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_19_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_4_19 read pattern: { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 3, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_4_19.read(/*ram type address*/ (7 - 0) * 1 + (3 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_255_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_255 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_255.read(/*ram type address*/ (0 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_256_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_256 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_256.read(/*ram type address*/ (1 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_257_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_257 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_257.read(/*ram type address*/ (2 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_258_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_258 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_258.read(/*ram type address*/ (3 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_259_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_259 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_259.read(/*ram type address*/ (4 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_260_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_260 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_260.read(/*ram type address*/ (5 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_261_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_261 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_261.read(/*ram type address*/ (6 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_262_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_5_262 read pattern: { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 4, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_5_262.read(/*ram type address*/ (7 - 0) * 1 + (4 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_273_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_273 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_273.read(/*ram type address*/ (0 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_274_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_274 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_274.read(/*ram type address*/ (1 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_275_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_275 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_275.read(/*ram type address*/ (2 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_276_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_276 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_276.read(/*ram type address*/ (3 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_277_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_277 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_277.read(/*ram type address*/ (4 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_278_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_278 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_278.read(/*ram type address*/ (5 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_279_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_279 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_279.read(/*ram type address*/ (6 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_280_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_6_280 read pattern: { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 5, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_6_280.read(/*ram type address*/ (7 - 0) * 1 + (5 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_237_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_237 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_237.read(/*ram type address*/ (0 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_238_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_238 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_238.read(/*ram type address*/ (1 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_239_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_239 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_239.read(/*ram type address*/ (2 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_240_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_240 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_240.read(/*ram type address*/ (3 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_241_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_241 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_241.read(/*ram type address*/ (4 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_242_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_242 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_242.read(/*ram type address*/ (5 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_243_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_243 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_243.read(/*ram type address*/ (6 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_244_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_7_244 read pattern: { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 6, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_7_244.read(/*ram type address*/ (7 - 0) * 1 + (6 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_66_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_66 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_66.read(/*ram type address*/ (0 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_67_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_67 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_67.read(/*ram type address*/ (1 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_68_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_68 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_68.read(/*ram type address*/ (2 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_69_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_69 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_69.read(/*ram type address*/ (3 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_70_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_70 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_70.read(/*ram type address*/ (4 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_71_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_71 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_71.read(/*ram type address*/ (5 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_72_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_72 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_72.read(/*ram type address*/ (6 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_73_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_8_73 read pattern: { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 7, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_8_73.read(/*ram type address*/ (7 - 0) * 1 + (7 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_30_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_30 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[0, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_30.read(/*ram type address*/ (0 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_31_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_31 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[1, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_31.read(/*ram type address*/ (1 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_32_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_32 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[2, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_32.read(/*ram type address*/ (2 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_33_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_33 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[3, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_33.read(/*ram type address*/ (3 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_34_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_34 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[4, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_34.read(/*ram type address*/ (4 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_35_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_35 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[5, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_35.read(/*ram type address*/ (5 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_36_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_36 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[6, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_36.read(/*ram type address*/ (6 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

inline hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_37_select(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  // hw_kernel_stencil_op_hcompute_conv_stencil_9_37 read pattern: { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> hw_kernel_stencil[7, 8, conv_s1_r_x, conv_s1_r_y] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
  auto value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146 = hw_kernel_stencil.hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_to_hw_kernel_stencil_op_hcompute_conv_stencil_9_37.read(/*ram type address*/ (7 - 0) * 1 + (8 - 0) * 8 + (conv_s1_r_x - 0) * 128 + (conv_s1_r_y - 0) * 384);
  return value_hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146;
  return 0;
}

// # of bundles = 17
// op_hcompute_conv_stencil_10_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_48
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_49
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_50
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_51
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_52
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_53
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_54
//	hw_kernel_stencil_op_hcompute_conv_stencil_10_55
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_48
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_49
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_50
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_51
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_52
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_53
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_54
    // hw_kernel_stencil_op_hcompute_conv_stencil_10_55

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_48_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_48_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_48_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_49_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_49_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_49_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_50_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_50_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_50_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_51_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_51_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_51_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_52_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_52_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_52_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_53_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_53_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_53_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_54_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_54_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_54_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_10_55_res = hw_kernel_stencil_op_hcompute_conv_stencil_10_55_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_10_55_res);
	return result;
}

// op_hcompute_conv_stencil_11_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_120
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_121
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_122
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_123
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_124
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_125
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_126
//	hw_kernel_stencil_op_hcompute_conv_stencil_11_127
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_120
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_121
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_122
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_123
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_124
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_125
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_126
    // hw_kernel_stencil_op_hcompute_conv_stencil_11_127

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_120_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_120_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_120_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_121_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_121_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_121_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_122_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_122_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_122_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_123_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_123_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_123_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_124_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_124_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_124_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_125_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_125_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_125_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_126_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_126_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_126_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_11_127_res = hw_kernel_stencil_op_hcompute_conv_stencil_11_127_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_11_127_res);
	return result;
}

// op_hcompute_conv_stencil_12_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_138
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_139
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_140
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_141
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_142
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_143
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_144
//	hw_kernel_stencil_op_hcompute_conv_stencil_12_145
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_138
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_139
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_140
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_141
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_142
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_143
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_144
    // hw_kernel_stencil_op_hcompute_conv_stencil_12_145

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_138_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_138_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_138_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_139_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_139_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_139_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_140_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_140_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_140_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_141_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_141_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_141_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_142_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_142_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_142_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_143_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_143_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_143_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_144_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_144_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_144_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_12_145_res = hw_kernel_stencil_op_hcompute_conv_stencil_12_145_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_12_145_res);
	return result;
}

// op_hcompute_conv_stencil_13_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_84
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_85
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_86
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_87
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_88
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_89
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_90
//	hw_kernel_stencil_op_hcompute_conv_stencil_13_91
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_84
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_85
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_86
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_87
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_88
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_89
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_90
    // hw_kernel_stencil_op_hcompute_conv_stencil_13_91

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_84_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_84_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_84_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_85_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_85_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_85_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_86_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_86_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_86_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_87_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_87_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_87_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_88_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_88_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_88_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_89_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_89_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_89_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_90_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_90_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_90_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_13_91_res = hw_kernel_stencil_op_hcompute_conv_stencil_13_91_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_13_91_res);
	return result;
}

// op_hcompute_conv_stencil_14_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_102
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_103
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_104
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_105
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_106
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_107
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_108
//	hw_kernel_stencil_op_hcompute_conv_stencil_14_109
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_102
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_103
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_104
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_105
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_106
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_107
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_108
    // hw_kernel_stencil_op_hcompute_conv_stencil_14_109

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_102_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_102_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_102_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_103_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_103_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_103_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_104_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_104_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_104_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_105_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_105_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_105_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_106_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_106_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_106_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_107_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_107_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_107_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_108_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_108_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_108_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_14_109_res = hw_kernel_stencil_op_hcompute_conv_stencil_14_109_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_14_109_res);
	return result;
}

// op_hcompute_conv_stencil_15_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_194
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_195
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_196
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_197
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_198
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_199
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_200
//	hw_kernel_stencil_op_hcompute_conv_stencil_15_201
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_194
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_195
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_196
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_197
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_198
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_199
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_200
    // hw_kernel_stencil_op_hcompute_conv_stencil_15_201

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_194_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_194_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_194_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_195_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_195_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_195_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_196_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_196_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_196_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_197_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_197_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_197_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_198_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_198_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_198_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_199_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_199_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_199_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_200_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_200_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_200_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_15_201_res = hw_kernel_stencil_op_hcompute_conv_stencil_15_201_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_15_201_res);
	return result;
}

// op_hcompute_conv_stencil_16_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_158
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_159
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_160
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_161
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_162
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_163
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_164
//	hw_kernel_stencil_op_hcompute_conv_stencil_16_165
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_158
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_159
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_160
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_161
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_162
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_163
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_164
    // hw_kernel_stencil_op_hcompute_conv_stencil_16_165

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_158_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_158_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_158_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_159_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_159_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_159_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_160_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_160_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_160_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_161_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_161_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_161_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_162_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_162_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_162_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_163_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_163_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_163_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_164_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_164_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_164_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_16_165_res = hw_kernel_stencil_op_hcompute_conv_stencil_16_165_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_16_165_res);
	return result;
}

// op_hcompute_conv_stencil_1_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_176
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_177
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_178
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_179
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_180
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_181
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_182
//	hw_kernel_stencil_op_hcompute_conv_stencil_1_183
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_176
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_177
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_178
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_179
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_180
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_181
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_182
    // hw_kernel_stencil_op_hcompute_conv_stencil_1_183

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_176_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_176_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_176_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_177_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_177_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_177_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_178_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_178_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_178_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_179_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_179_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_179_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_180_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_180_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_180_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_181_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_181_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_181_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_182_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_182_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_182_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_1_183_res = hw_kernel_stencil_op_hcompute_conv_stencil_1_183_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_1_183_res);
	return result;
}

// op_hcompute_conv_stencil_2_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_212
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_213
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_214
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_215
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_216
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_217
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_218
//	hw_kernel_stencil_op_hcompute_conv_stencil_2_219
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_212
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_213
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_214
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_215
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_216
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_217
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_218
    // hw_kernel_stencil_op_hcompute_conv_stencil_2_219

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_212_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_212_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_212_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_213_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_213_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_213_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_214_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_214_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_214_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_215_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_215_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_215_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_216_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_216_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_216_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_217_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_217_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_217_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_218_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_218_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_218_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_2_219_res = hw_kernel_stencil_op_hcompute_conv_stencil_2_219_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_2_219_res);
	return result;
}

// op_hcompute_conv_stencil_3_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_291
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_292
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_293
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_294
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_295
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_296
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_297
//	hw_kernel_stencil_op_hcompute_conv_stencil_3_298
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_291
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_292
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_293
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_294
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_295
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_296
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_297
    // hw_kernel_stencil_op_hcompute_conv_stencil_3_298

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_291_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_291_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_291_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_292_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_292_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_292_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_293_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_293_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_293_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_294_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_294_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_294_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_295_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_295_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_295_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_296_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_296_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_296_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_297_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_297_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_297_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_3_298_res = hw_kernel_stencil_op_hcompute_conv_stencil_3_298_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_3_298_res);
	return result;
}

// op_hcompute_conv_stencil_4_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_12
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_13
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_14
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_15
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_16
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_17
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_18
//	hw_kernel_stencil_op_hcompute_conv_stencil_4_19
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_12
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_13
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_14
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_15
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_16
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_17
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_18
    // hw_kernel_stencil_op_hcompute_conv_stencil_4_19

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_12_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_12_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_12_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_13_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_13_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_13_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_14_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_14_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_14_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_15_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_15_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_15_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_16_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_16_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_16_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_17_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_17_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_17_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_18_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_18_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_18_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_4_19_res = hw_kernel_stencil_op_hcompute_conv_stencil_4_19_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_4_19_res);
	return result;
}

// op_hcompute_conv_stencil_5_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_255
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_256
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_257
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_258
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_259
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_260
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_261
//	hw_kernel_stencil_op_hcompute_conv_stencil_5_262
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_255
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_256
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_257
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_258
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_259
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_260
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_261
    // hw_kernel_stencil_op_hcompute_conv_stencil_5_262

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_255_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_255_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_255_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_256_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_256_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_256_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_257_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_257_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_257_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_258_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_258_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_258_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_259_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_259_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_259_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_260_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_260_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_260_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_261_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_261_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_261_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_5_262_res = hw_kernel_stencil_op_hcompute_conv_stencil_5_262_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_5_262_res);
	return result;
}

// op_hcompute_conv_stencil_6_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_273
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_274
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_275
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_276
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_277
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_278
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_279
//	hw_kernel_stencil_op_hcompute_conv_stencil_6_280
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_273
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_274
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_275
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_276
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_277
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_278
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_279
    // hw_kernel_stencil_op_hcompute_conv_stencil_6_280

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_273_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_273_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_273_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_274_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_274_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_274_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_275_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_275_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_275_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_276_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_276_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_276_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_277_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_277_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_277_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_278_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_278_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_278_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_279_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_279_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_279_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_6_280_res = hw_kernel_stencil_op_hcompute_conv_stencil_6_280_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_6_280_res);
	return result;
}

// op_hcompute_conv_stencil_7_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_237
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_238
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_239
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_240
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_241
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_242
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_243
//	hw_kernel_stencil_op_hcompute_conv_stencil_7_244
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_237
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_238
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_239
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_240
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_241
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_242
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_243
    // hw_kernel_stencil_op_hcompute_conv_stencil_7_244

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_237_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_237_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_237_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_238_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_238_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_238_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_239_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_239_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_239_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_240_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_240_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_240_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_241_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_241_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_241_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_242_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_242_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_242_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_243_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_243_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_243_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_7_244_res = hw_kernel_stencil_op_hcompute_conv_stencil_7_244_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_7_244_res);
	return result;
}

// op_hcompute_conv_stencil_8_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_66
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_67
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_68
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_69
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_70
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_71
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_72
//	hw_kernel_stencil_op_hcompute_conv_stencil_8_73
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_66
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_67
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_68
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_69
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_70
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_71
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_72
    // hw_kernel_stencil_op_hcompute_conv_stencil_8_73

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_66_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_66_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_66_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_67_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_67_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_67_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_68_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_68_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_68_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_69_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_69_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_69_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_70_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_70_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_70_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_71_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_71_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_71_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_72_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_72_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_72_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_8_73_res = hw_kernel_stencil_op_hcompute_conv_stencil_8_73_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_8_73_res);
	return result;
}

// op_hcompute_conv_stencil_9_read
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_30
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_31
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_32
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_33
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_34
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_35
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_36
//	hw_kernel_stencil_op_hcompute_conv_stencil_9_37
inline hw_uint<128> hw_kernel_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x, int dynamic_address) {
  // # of ports in bundle: 8
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_30
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_31
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_32
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_33
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_34
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_35
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_36
    // hw_kernel_stencil_op_hcompute_conv_stencil_9_37

	hw_uint<128> result;
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_30_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_30_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<0, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_30_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_31_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_31_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<16, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_31_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_32_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_32_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<32, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_32_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_33_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_33_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<48, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_33_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_34_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_34_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<64, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_34_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_35_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_35_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<80, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_35_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_36_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_36_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<96, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_36_res);
	hw_uint<16> hw_kernel_stencil_op_hcompute_conv_stencil_9_37_res = hw_kernel_stencil_op_hcompute_conv_stencil_9_37_select(hw_kernel_stencil, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, dynamic_address);
	set_at<112, 128>(result, hw_kernel_stencil_op_hcompute_conv_stencil_9_37_res);
	return result;
}

// op_hcompute_hw_kernel_stencil_write
//	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146
inline void hw_kernel_stencil_op_hcompute_hw_kernel_stencil_write_bundle_write(hw_uint<16>& op_hcompute_hw_kernel_stencil_write, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z, int dynamic_address) {
	hw_uint<16> hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_res = op_hcompute_hw_kernel_stencil_write.extract<0, 15>();
	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_write(hw_kernel_stencil_op_hcompute_hw_kernel_stencil_146_res, hw_kernel_stencil, root, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z, dynamic_address);
}



// Operation logic
inline void op_hcompute_hw_input_stencil(HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */input_copy_stencil, hw_input_stencil_cache& hw_input_stencil, int root, int hw_input_s0_y, int hw_input_s0_x, int hw_input_s0_z) {
  // Dynamic address computation

	// Consume: input_copy_stencil
	auto input_copy_stencil_hw_input_s0_z_c__hw_input_s0_x_c__hw_input_s0_y_value = input_copy_stencil.read();
	auto compute_result = hcompute_hw_input_stencil(input_copy_stencil_hw_input_s0_z_c__hw_input_s0_x_c__hw_input_s0_y_value);
	// Produce: hw_input_stencil
	hw_input_stencil_op_hcompute_hw_input_stencil_write_bundle_write(/* arg names */compute_result, hw_input_stencil, root, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__3_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__3_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_4_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__3_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__3_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_4_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__8_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__8_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_9_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__8_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__8_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_9_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__9_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__9_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_10_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__9_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__9_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_10_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__7_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__7_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_8_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__7_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__7_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_8_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__12_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_3_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_3_c__12_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_13_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__12_value, hw_input_stencil_3_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_3_c__12_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_13_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__13_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__13_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_14_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__13_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__13_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_14_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__10_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__10_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_11_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__10_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__10_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_11_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__11_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__11_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_12_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__11_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__11_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_12_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_hw_kernel_stencil(HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */kernel_copy_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int hw_kernel_s0_y, int hw_kernel_s0_x, int hw_kernel_s0_w, int hw_kernel_s0_z) {
  // Dynamic address computation

	// Consume: kernel_copy_stencil
	auto kernel_copy_stencil_hw_kernel_s0_z_c__hw_kernel_s0_w_c__hw_kernel_s0_x_c__hw_kernel_s0_y_value = kernel_copy_stencil.read();
	auto compute_result = hcompute_hw_kernel_stencil(kernel_copy_stencil_hw_kernel_s0_z_c__hw_kernel_s0_w_c__hw_kernel_s0_x_c__hw_kernel_s0_y_value);
	// Produce: hw_kernel_stencil
	hw_kernel_stencil_op_hcompute_hw_kernel_stencil_write_bundle_write(/* arg names */compute_result, hw_kernel_stencil, root, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__15_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__15_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_16_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__15_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__15_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_16_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__0_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__0_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_1_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__0_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__0_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_1_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__14_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__14_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_15_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__14_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__14_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_15_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__1_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_1_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_1_c__1_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_2_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__1_value, hw_input_stencil_1_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_1_c__1_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_2_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_hw_output_stencil(conv_stencil_cache& conv_stencil, HWStream<hw_uint<16> >& /* buffer_args num ports = 1 */hw_output_stencil, int root, int hw_output_s0_w, int hw_output_s0_y_yi, int hw_output_s0_x_xi) {
  // Dynamic address computation

	// Consume: conv_stencil
	auto conv_stencil_hw_output_s0_x_xi_c__hw_output_s0_y_yi_c__hw_output_s0_w_value = conv_stencil_op_hcompute_hw_output_stencil_read_bundle_read(conv_stencil/* source_delay */, root, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_hw_output_stencil(conv_stencil_hw_output_s0_x_xi_c__hw_output_s0_y_yi_c__hw_output_s0_w_value);
	// Produce: hw_output_stencil
	hw_output_stencil.write(compute_result);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void load_to_conv_stencil_rb_at_conv_s1_x3(conv_stencil_cache& conv_stencil, conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_stencil_ld0, int conv_stencil_ld1, int conv_stencil_ld2) {
  // Dynamic address computation

	// Consume: conv_stencil
	auto conv_stencil_conv_stencil_ld0__p__0_c__conv_stencil_ld1__p__conv_s1_y_c__conv_stencil_ld2__p__0_value = conv_stencil_load_to_conv_stencil_rb_at_conv_s1_x3_read_bundle_read(conv_stencil/* source_delay */, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x3_write_bundle_write(/* arg names */conv_stencil_conv_stencil_ld0__p__0_c__conv_stencil_ld1__p__conv_s1_y_c__conv_stencil_ld2__p__0_value, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_stencil_ld0, conv_stencil_ld1, conv_stencil_ld2, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil(conv_stencil_cache& conv_stencil, int root, int conv_s0_y, int conv_s0_x, int conv_s0_w) {
  // Dynamic address computation

	auto compute_result = hcompute_conv_stencil();
	// Produce: conv_stencil
	conv_stencil_op_hcompute_conv_stencil_write_bundle_write(/* arg names */compute_result, conv_stencil, root, conv_s0_y, conv_s0_x, conv_s0_w, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void load_to_conv_stencil_rb_at_conv_s1_x7(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, int root, int conv_s1_y, int conv_s1_x, int conv_stencil_ld4, int conv_stencil_ld5, int conv_stencil_ld6) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_stencil_ld4__p__conv_s1_x_c__conv_stencil_ld5__p__conv_s1_y_c__conv_stencil_ld6__p__0_value = conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_load_to_conv_stencil_rb_at_conv_s1_x7_write_bundle_write(/* arg names */conv_stencil_rb_at_conv_s1_x_conv_stencil_ld4__p__conv_s1_x_c__conv_stencil_ld5__p__conv_s1_y_c__conv_stencil_ld6__p__0_value, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_stencil_ld4, conv_stencil_ld5, conv_stencil_ld6, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__6_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__6_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_7_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__6_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__6_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_7_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__4_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__4_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_5_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__4_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__4_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_5_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__5_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__5_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_6_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__5_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__5_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_6_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

inline void op_hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x_cache& conv_stencil_rb_at_conv_s1_x, hw_input_stencil_cache& hw_input_stencil, hw_kernel_stencil_cache& hw_kernel_stencil, int root, int conv_s1_y, int conv_s1_x, int conv_s1_r_y, int conv_s1_r_x) {
  // Dynamic address computation

	// Consume: conv_stencil_rb_at_conv_s1_x
	auto conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__2_value = conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_read_bundle_read(conv_stencil_rb_at_conv_s1_x/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_input_stencil
	auto hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value = hw_input_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_input_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	// Consume: hw_kernel_stencil
	auto hw_kernel_stencil_0_c__2_c__conv_s1_r_x_c__conv_s1_r_y_value = hw_kernel_stencil_op_hcompute_conv_stencil_3_read_bundle_read(hw_kernel_stencil/* source_delay */, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

	auto compute_result = hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x_conv_s1_x_c__conv_s1_y_c__2_value, hw_input_stencil_0_c___lp_conv_s1_r_x__p__conv_s1_x_rp__c___lp_conv_s1_r_y__p__conv_s1_y_rp__value, hw_kernel_stencil_0_c__2_c__conv_s1_r_x_c__conv_s1_r_y_value);
	// Produce: conv_stencil_rb_at_conv_s1_x
	conv_stencil_rb_at_conv_s1_x_op_hcompute_conv_stencil_3_write_bundle_write(/* arg names */compute_result, conv_stencil_rb_at_conv_s1_x, root, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x, 0);

#ifndef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__

}

// Driver function
void unoptimized_resnet(HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */input_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */kernel_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */hw_output_stencil) {

#ifndef __VIVADO_SYNTH__
  ofstream debug_file("unoptimized_resnet_debug.csv");
  global_debug_handle = &debug_file;
#endif //__VIVADO_SYNTH__
  conv_stencil_cache conv_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  conv_stencil_rb_at_conv_s1_x_cache conv_stencil_rb_at_conv_s1_x;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  hw_input_stencil_cache hw_input_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
  hw_kernel_stencil_cache hw_kernel_stencil;
#ifdef __VIVADO_SYNTH__
#endif //__VIVADO_SYNTH__
#ifdef __VIVADO_SYNTH__
#pragma HLS inline recursive
#endif // __VIVADO_SYNTH__

// schedule: { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 9, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 11, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 8, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> [0, 0, 3, conv_s1_y, 0, 0, 0, 0, 0, conv_stencil_ld2, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15; load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 1, 0, 0, 0, 0, conv_stencil_ld6, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15; op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 14, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 10, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 15, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil[root = 0, conv_s0_y, conv_s0_x, conv_s0_w] -> [0, 0, 2, conv_s0_y, 0, conv_s0_x, 0, conv_s0_w, 0, 0, 0, 0, 0] : 0 <= conv_s0_y <= 27 and 0 <= conv_s0_x <= 27 and 0 <= conv_s0_w <= 15; op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 4, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 12, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 1, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 7, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 13, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> [0, 0, 4, hw_output_s0_w, 0, hw_output_s0_y_yi, 0, hw_output_s0_x_xi, 0, 0, 0, 0, 0] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27; op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 3, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 2, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> [0, 0, 0, hw_input_s0_y, 0, hw_input_s0_x, 0, hw_input_s0_z, 0, 0, 0, 0, 0] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7; op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> [0, 0, 1, hw_kernel_s0_y, 0, hw_kernel_s0_x, 0, hw_kernel_s0_w, 0, hw_kernel_s0_z, 0, 0, 0] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7; op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 5, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2; op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 6, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
//   { op_hcompute_conv_stencil_10[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 9, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_10(((i12 == 0) && (i11 == 0) && (-9 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_12[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 11, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_12(((i12 == 0) && (i11 == 0) && (-11 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_1[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_1(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_9[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 8, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_9(((i12 == 0) && (i11 == 0) && (-8 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { load_to_conv_stencil_rb_at_conv_s1_x3[root = 0, conv_s1_y, conv_stencil_ld0 = 0, conv_stencil_ld1 = 0, conv_stencil_ld2] -> [0, 0, 3, conv_s1_y, 0, 0, 0, 0, 0, conv_stencil_ld2, 0, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_stencil_ld2 <= 15 }
// Condition for load_to_conv_stencil_rb_at_conv_s1_x3(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i7 == 0) && (i6 == 0) && (i5 == 0) && (i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i9 >= 0) && (15 - i9 >= 0)))
//   { load_to_conv_stencil_rb_at_conv_s1_x7[root = 0, conv_s1_y, conv_s1_x, conv_stencil_ld4 = 0, conv_stencil_ld5 = 0, conv_stencil_ld6] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 1, 0, 0, 0, 0, conv_stencil_ld6, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_stencil_ld6 <= 15 }
// Condition for load_to_conv_stencil_rb_at_conv_s1_x7(((i12 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i7 == 0) && (-1 + i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i11 >= 0) && (15 - i11 >= 0)))
//   { op_hcompute_conv_stencil_15[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 14, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_15(((i12 == 0) && (i11 == 0) && (-14 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_11[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 10, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_11(((i12 == 0) && (i11 == 0) && (-10 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_16[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 15, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_16(((i12 == 0) && (i11 == 0) && (-15 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil[root = 0, conv_s0_y, conv_s0_x, conv_s0_w] -> [0, 0, 2, conv_s0_y, 0, conv_s0_x, 0, conv_s0_w, 0, 0, 0, 0, 0] : 0 <= conv_s0_y <= 27 and 0 <= conv_s0_x <= 27 and 0 <= conv_s0_w <= 15 }
// Condition for op_hcompute_conv_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-2 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (15 - i7 >= 0)))
//   { op_hcompute_conv_stencil_5[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 4, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_5(((i12 == 0) && (i11 == 0) && (-4 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_13[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 12, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_13(((i12 == 0) && (i11 == 0) && (-12 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_2[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 1, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_2(((i12 == 0) && (i11 == 0) && (-1 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_8[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 7, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_8(((i12 == 0) && (i11 == 0) && (-7 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_14[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 13, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_14(((i12 == 0) && (i11 == 0) && (-13 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> [0, 0, 4, hw_output_s0_w, 0, hw_output_s0_y_yi, 0, hw_output_s0_x_xi, 0, 0, 0, 0, 0] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
// Condition for op_hcompute_hw_output_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-4 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (15 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (27 - i7 >= 0)))
//   { op_hcompute_conv_stencil_4[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 3, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_4(((i12 == 0) && (i11 == 0) && (-3 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_3[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 2, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_3(((i12 == 0) && (i11 == 0) && (-2 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> [0, 0, 0, hw_input_s0_y, 0, hw_input_s0_x, 0, hw_input_s0_z, 0, 0, 0, 0, 0] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7 }
// Condition for op_hcompute_hw_input_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i9 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (29 - i3 >= 0) && (i5 >= 0) && (29 - i5 >= 0) && (i7 >= 0) && (7 - i7 >= 0)))
//   { op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> [0, 0, 1, hw_kernel_s0_y, 0, hw_kernel_s0_x, 0, hw_kernel_s0_w, 0, hw_kernel_s0_z, 0, 0, 0] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7 }
// Condition for op_hcompute_hw_kernel_stencil(((i12 == 0) && (i11 == 0) && (i10 == 0) && (i8 == 0) && (i6 == 0) && (i4 == 0) && (-1 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (2 - i3 >= 0) && (i5 >= 0) && (2 - i5 >= 0) && (i7 >= 0) && (15 - i7 >= 0) && (i9 >= 0) && (7 - i9 >= 0)))
//   { op_hcompute_conv_stencil_6[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 5, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_6(((i12 == 0) && (i11 == 0) && (-5 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))
//   { op_hcompute_conv_stencil_7[root = 0, conv_s1_y, conv_s1_x, conv_s1_r_y, conv_s1_r_x] -> [0, 0, 3, conv_s1_y, 1, conv_s1_x, 0, conv_s1_r_y, 0, conv_s1_r_x, 6, 0, 0] : 0 <= conv_s1_y <= 27 and 0 <= conv_s1_x <= 27 and 0 <= conv_s1_r_y <= 2 and 0 <= conv_s1_r_x <= 2 }
// Condition for op_hcompute_conv_stencil_7(((i12 == 0) && (i11 == 0) && (-6 + i10 == 0) && (i8 == 0) && (i6 == 0) && (-1 + i4 == 0) && (-3 + i2 == 0) && (i1 == 0) && (i0 == 0) && (i3 >= 0) && (27 - i3 >= 0) && (i5 >= 0) && (27 - i5 >= 0) && (i7 >= 0) && (2 - i7 >= 0) && (i9 >= 0) && (2 - i9 >= 0)))

  /*
{
  for (int c3 = 0; c3 <= 29; c3 += 1)
    for (int c5 = 0; c5 <= 29; c5 += 1)
      for (int c7 = 0; c7 <= 7; c7 += 1)
        op_hcompute_hw_input_stencil(0, c3, c5, c7);
  for (int c3 = 0; c3 <= 2; c3 += 1)
    for (int c5 = 0; c5 <= 2; c5 += 1)
      for (int c7 = 0; c7 <= 15; c7 += 1)
        for (int c9 = 0; c9 <= 7; c9 += 1)
          op_hcompute_hw_kernel_stencil(0, c3, c5, c7, c9);
  for (int c3 = 0; c3 <= 27; c3 += 1)
    for (int c5 = 0; c5 <= 27; c5 += 1)
      for (int c7 = 0; c7 <= 15; c7 += 1)
        op_hcompute_conv_stencil(0, c3, c5, c7);
  for (int c3 = 0; c3 <= 27; c3 += 1) {
    for (int c9 = 0; c9 <= 15; c9 += 1)
      load_to_conv_stencil_rb_at_conv_s1_x3(0, c3, 0, 0, c9);
    for (int c5 = 0; c5 <= 27; c5 += 1) {
      for (int c7 = 0; c7 <= 2; c7 += 1)
        for (int c9 = 0; c9 <= 2; c9 += 1) {
          op_hcompute_conv_stencil_1(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_2(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_3(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_4(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_5(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_6(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_7(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_8(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_9(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_10(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_11(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_12(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_13(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_14(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_15(0, c3, c5, c7, c9);
          op_hcompute_conv_stencil_16(0, c3, c5, c7, c9);
        }
      for (int c11 = 0; c11 <= 15; c11 += 1)
        load_to_conv_stencil_rb_at_conv_s1_x7(0, c3, c5, 0, 0, c11);
    }
  }
  for (int c3 = 0; c3 <= 15; c3 += 1)
    for (int c5 = 0; c5 <= 27; c5 += 1)
      for (int c7 = 0; c7 <= 27; c7 += 1)
        op_hcompute_hw_output_stencil(0, c3, c5, c7);
}

  */
	{
	  for (int c3 = 0; c3 <= 29; c3 += 1)
	    for (int c5 = 0; c5 <= 29; c5 += 1)
	      for (int c7 = 0; c7 <= 7; c7 += 1)
	        op_hcompute_hw_input_stencil(input_copy_stencil /* buf name */, hw_input_stencil, 0, c3, c5, c7);
	  for (int c3 = 0; c3 <= 2; c3 += 1)
	    for (int c5 = 0; c5 <= 2; c5 += 1)
	      for (int c7 = 0; c7 <= 15; c7 += 1)
	        for (int c9 = 0; c9 <= 7; c9 += 1)
	          op_hcompute_hw_kernel_stencil(kernel_copy_stencil /* buf name */, hw_kernel_stencil, 0, c3, c5, c7, c9);
	  for (int c3 = 0; c3 <= 27; c3 += 1)
	    for (int c5 = 0; c5 <= 27; c5 += 1)
	      for (int c7 = 0; c7 <= 15; c7 += 1)
	        op_hcompute_conv_stencil(conv_stencil, 0, c3, c5, c7);
	  for (int c3 = 0; c3 <= 27; c3 += 1) {
	    for (int c9 = 0; c9 <= 15; c9 += 1)
	      load_to_conv_stencil_rb_at_conv_s1_x3(conv_stencil /* buf name */, conv_stencil_rb_at_conv_s1_x, 0, c3, 0, 0, c9);
	    for (int c5 = 0; c5 <= 27; c5 += 1) {
	      for (int c7 = 0; c7 <= 2; c7 += 1)
	        for (int c9 = 0; c9 <= 2; c9 += 1) {
	          op_hcompute_conv_stencil_1(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_2(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_3(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_4(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_5(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_6(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_7(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_8(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_9(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_10(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_11(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_12(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_13(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_14(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_15(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	          op_hcompute_conv_stencil_16(conv_stencil_rb_at_conv_s1_x /* buf name */, hw_input_stencil /* buf name */, hw_kernel_stencil /* buf name */, 0, c3, c5, c7, c9);
	        }
	      for (int c11 = 0; c11 <= 15; c11 += 1)
	        load_to_conv_stencil_rb_at_conv_s1_x7(conv_stencil_rb_at_conv_s1_x /* buf name */, 0, c3, c5, 0, 0, c11);
	    }
	  }
	  for (int c3 = 0; c3 <= 15; c3 += 1)
	    for (int c5 = 0; c5 <= 27; c5 += 1)
	      for (int c7 = 0; c7 <= 27; c7 += 1)
	        op_hcompute_hw_output_stencil(conv_stencil /* buf name */, hw_output_stencil, 0, c3, c5, c7);
	}
	
#ifndef __VIVADO_SYNTH__
  debug_file.close();
#endif //__VIVADO_SYNTH__
}

void unoptimized_resnet_wrapper(HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */input_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */kernel_copy_stencil, HWStream<hw_uint<16> >& /* no bundle get_args num ports = 1 */hw_output_stencil, const int num_epochs) {

  for (int epoch = 0; epoch < num_epochs; epoch++) {
    unoptimized_resnet(input_copy_stencil, kernel_copy_stencil, hw_output_stencil);
  }
}
#ifdef __VIVADO_SYNTH__
  // { op_hcompute_hw_output_stencil[root = 0, hw_output_s0_w, hw_output_s0_y_yi, hw_output_s0_x_xi] -> hw_output_stencil[hw_output_s0_x_xi, hw_output_s0_y_yi, hw_output_s0_w] : 0 <= hw_output_s0_w <= 15 and 0 <= hw_output_s0_y_yi <= 27 and 0 <= hw_output_s0_x_xi <= 27 }
const int op_hcompute_hw_output_stencil_write_pipe0_num_transfers = 12544;
  // { op_hcompute_hw_input_stencil[root = 0, hw_input_s0_y, hw_input_s0_x, hw_input_s0_z] -> input_copy_stencil[hw_input_s0_z, hw_input_s0_x, hw_input_s0_y] : 0 <= hw_input_s0_y <= 29 and 0 <= hw_input_s0_x <= 29 and 0 <= hw_input_s0_z <= 7 }
const int op_hcompute_hw_input_stencil_read_pipe0_num_transfers = 7200;
  // { op_hcompute_hw_kernel_stencil[root = 0, hw_kernel_s0_y, hw_kernel_s0_x, hw_kernel_s0_w, hw_kernel_s0_z] -> kernel_copy_stencil[hw_kernel_s0_z, hw_kernel_s0_w, hw_kernel_s0_x, hw_kernel_s0_y] : 0 <= hw_kernel_s0_y <= 2 and 0 <= hw_kernel_s0_x <= 2 and 0 <= hw_kernel_s0_w <= 15 and 0 <= hw_kernel_s0_z <= 7 }
const int op_hcompute_hw_kernel_stencil_read_pipe0_num_transfers = 1152;


extern "C" {

void unoptimized_resnet_accel(hw_uint<16>* op_hcompute_hw_input_stencil_read_pipe0, hw_uint<16>* op_hcompute_hw_kernel_stencil_read_pipe0, hw_uint<16>* op_hcompute_hw_output_stencil_write_pipe0, const int size) { 
#pragma HLS dataflow
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_input_stencil_read_pipe0 offset = slave depth = 65536 bundle = gmem0
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_kernel_stencil_read_pipe0 offset = slave depth = 65536 bundle = gmem1
#pragma HLS INTERFACE m_axi port = op_hcompute_hw_output_stencil_write_pipe0 offset = slave depth = 65536 bundle = gmem2

#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_input_stencil_read_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_kernel_stencil_read_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = op_hcompute_hw_output_stencil_write_pipe0 bundle = control
#pragma HLS INTERFACE s_axilite port = size bundle = control
#pragma HLS INTERFACE s_axilite port = return bundle = control


  // Pipeline # 0
  static HWStream<hw_uint<16> > op_hcompute_hw_input_stencil_read_pipe0_channel;
  static HWStream<hw_uint<16> > op_hcompute_hw_kernel_stencil_read_pipe0_channel;
  static HWStream<hw_uint<16> > op_hcompute_hw_output_stencil_write_pipe0_channel;

  burst_read<16>(op_hcompute_hw_input_stencil_read_pipe0, op_hcompute_hw_input_stencil_read_pipe0_channel, op_hcompute_hw_input_stencil_read_pipe0_num_transfers*size);
  burst_read<16>(op_hcompute_hw_kernel_stencil_read_pipe0, op_hcompute_hw_kernel_stencil_read_pipe0_channel, op_hcompute_hw_kernel_stencil_read_pipe0_num_transfers*size);

  unoptimized_resnet_wrapper(op_hcompute_hw_input_stencil_read_pipe0_channel, op_hcompute_hw_kernel_stencil_read_pipe0_channel, op_hcompute_hw_output_stencil_write_pipe0_channel, size);

  burst_write<16>(op_hcompute_hw_output_stencil_write_pipe0, op_hcompute_hw_output_stencil_write_pipe0_channel, op_hcompute_hw_output_stencil_write_pipe0_num_transfers*size);
}

}
extern "C" {

void unoptimized_resnet_rdai(HWStream<hw_uint<16> >& op_hcompute_hw_input_stencil_read_pipe0, HWStream<hw_uint<16> >& op_hcompute_hw_kernel_stencil_read_pipe0, HWStream<hw_uint<16> >&  op_hcompute_hw_output_stencil_write_pipe0) { 
#pragma HLS dataflow
#pragma HLS INTERFACE axis register port = op_hcompute_hw_input_stencil_read_pipe0
#pragma HLS INTERFACE axis register port = op_hcompute_hw_kernel_stencil_read_pipe0
#pragma HLS INTERFACE axis register port = op_hcompute_hw_output_stencil_write_pipe0

#pragma HLS INTERFACE ap_ctrl_none port = return


  // Pipeline # 0

  unoptimized_resnet(op_hcompute_hw_input_stencil_read_pipe0, op_hcompute_hw_kernel_stencil_read_pipe0, op_hcompute_hw_output_stencil_write_pipe0);

}

}
#endif //__VIVADO_SYNTH__

