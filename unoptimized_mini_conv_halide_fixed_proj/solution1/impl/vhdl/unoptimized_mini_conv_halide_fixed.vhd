-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unoptimized_mini_conv_halide_fixed is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hw_input_stencil_values_V_val_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hw_input_stencil_values_V_val_V_empty_n : IN STD_LOGIC;
    hw_input_stencil_values_V_val_V_read : OUT STD_LOGIC;
    hw_output_stencil_values_V_val_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    hw_output_stencil_values_V_val_V_full_n : IN STD_LOGIC;
    hw_output_stencil_values_V_val_V_write : OUT STD_LOGIC );
end;


architecture behav of unoptimized_mini_conv_halide_fixed is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "unoptimized_mini_conv_halide_fixed,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.266000,HLS_SYN_LAT=316,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=64,HLS_SYN_LUT=132,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hw_input_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln294_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal c3_fu_113_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c3_reg_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_val_V_1_reg_149 : STD_LOGIC_VECTOR (15 downto 0);
    signal c3_1_fu_130_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c3_1_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln296_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_input_copy_stenci_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal hw_input_copy_stenci_3_reg_167 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal hw_input_copy_stenci_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal hw_input_copy_stenci_ce0 : STD_LOGIC;
    signal hw_input_copy_stenci_we0 : STD_LOGIC;
    signal hw_input_copy_s0_x_a_reg_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal hw_output_s0_x_xo_as_reg_96 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln136_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component unoptimized_mini_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    hw_input_copy_stenci_U : component unoptimized_mini_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hw_input_copy_stenci_address0,
        ce0 => hw_input_copy_stenci_ce0,
        we0 => hw_input_copy_stenci_we0,
        d0 => tmp_val_V_1_reg_149,
        q0 => hw_input_copy_stenci_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    hw_input_copy_s0_x_a_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                hw_input_copy_s0_x_a_reg_84 <= c3_reg_144;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                hw_input_copy_s0_x_a_reg_84 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    hw_output_s0_x_xo_as_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln294_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                hw_output_s0_x_xo_as_reg_96 <= ap_const_lv6_0;
            elsif (((hw_output_stencil_values_V_val_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                hw_output_s0_x_xo_as_reg_96 <= c3_1_reg_157;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c3_1_reg_157 <= c3_1_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c3_reg_144 <= c3_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                hw_input_copy_stenci_3_reg_167 <= hw_input_copy_stenci_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_val_V_1_reg_149 <= hw_input_stencil_values_V_val_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, hw_input_stencil_values_V_val_V_empty_n, hw_output_stencil_values_V_val_V_full_n, ap_CS_fsm_state2, icmp_ln294_fu_107_p2, ap_CS_fsm_state6, ap_CS_fsm_state4, icmp_ln296_fu_124_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln294_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln296_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((hw_output_stencil_values_V_val_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state2_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, icmp_ln294_fu_107_p2)
    begin
                ap_block_state2 <= ((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln296_fu_124_p2)
    begin
        if (((icmp_ln296_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln296_fu_124_p2)
    begin
        if (((icmp_ln296_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c3_1_fu_130_p2 <= std_logic_vector(unsigned(hw_output_s0_x_xo_as_reg_96) + unsigned(ap_const_lv6_1));
    c3_fu_113_p2 <= std_logic_vector(unsigned(hw_input_copy_s0_x_a_reg_84) + unsigned(ap_const_lv7_1));

    hw_input_copy_stenci_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln136_fu_119_p1, zext_ln80_fu_136_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hw_input_copy_stenci_address0 <= zext_ln80_fu_136_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_input_copy_stenci_address0 <= zext_ln136_fu_119_p1(6 - 1 downto 0);
        else 
            hw_input_copy_stenci_address0 <= "XXXXXX";
        end if; 
    end process;


    hw_input_copy_stenci_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            hw_input_copy_stenci_ce0 <= ap_const_logic_1;
        else 
            hw_input_copy_stenci_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_copy_stenci_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_input_copy_stenci_we0 <= ap_const_logic_1;
        else 
            hw_input_copy_stenci_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_stencil_values_V_val_V_blk_n_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state2, icmp_ln294_fu_107_p2)
    begin
        if (((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hw_input_stencil_values_V_val_V_blk_n <= hw_input_stencil_values_V_val_V_empty_n;
        else 
            hw_input_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hw_input_stencil_values_V_val_V_read_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state2, icmp_ln294_fu_107_p2)
    begin
        if ((not(((icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln294_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hw_input_stencil_values_V_val_V_read <= ap_const_logic_1;
        else 
            hw_input_stencil_values_V_val_V_read <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_stencil_values_V_val_V_blk_n_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_output_stencil_values_V_val_V_blk_n <= hw_output_stencil_values_V_val_V_full_n;
        else 
            hw_output_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_stencil_values_V_val_V_din <= hw_input_copy_stenci_3_reg_167;

    hw_output_stencil_values_V_val_V_write_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, ap_CS_fsm_state6)
    begin
        if (((hw_output_stencil_values_V_val_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_1;
        else 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln294_fu_107_p2 <= "1" when (hw_input_copy_s0_x_a_reg_84 = ap_const_lv7_40) else "0";
    icmp_ln296_fu_124_p2 <= "1" when (hw_output_s0_x_xo_as_reg_96 = ap_const_lv6_3E) else "0";
    zext_ln136_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hw_input_copy_s0_x_a_reg_84),64));
    zext_ln80_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hw_output_s0_x_xo_as_reg_96),64));
end behav;
